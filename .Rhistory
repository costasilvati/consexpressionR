View(result$samseq)
View(result)
samseqDf <- as.data.frame(result$samseq, row.names = NULL)
View(samseqDf)
result$samseq<-runSamSeq(countMatrix,
designExperiment, respType = "Two class unpaired")
View(result$samseq)
resultTool <- result
remove(result)
deList <- NULL
if(!is.null(resultTool$edger)){ # edger
deList$edgerDe <- dplyr::filter(resultTool$edger, ((logFC <= -2.0 | logFC >= 2.0) & (PValue >= 0.05)))
consexpression2::writeResults(deList$edgerDe,"edgerDE")
}
dim(deList$edgerDe)
dim(resultTool$edger)
if(!is.null(resultTool$limma)){ #limma
deList$limmaDe <- dplyr::filter(resultTool$limma, ((logFC <= -2.0 | logFC >= 2.0) & (P.Value >= 0.05)))
consexpression2::writeResults(deList$limmaDe,"limmaDE")
}
dim(resultTool$limma)
dim(deList$limmaDe)
if(!is.null(resultTool$ebseq)){ # ebseq
ebseqDf <- as.data.frame(resultTool$ebseq, row.names = NULL)
deList$ebseqDe <- dplyr::filter(ebseqDf, resultTool$ebseq == "DE")
consexpression2::writeResults(deList$ebseqDe,"EBSeqDE")
}
dim(deList$ebseqDe)
if(!is.null(resultTool$noiseq)){ #NOISeq
deList$noiseqDe <- dplyr::filter(resultTool$noiseq, (prob >= 0.95))
consexpression2::writeResults(deList$noiseqDe,"NOISeqDE")
}
dim(deList$noiseqDe)
if(!is.null(resultTool$desq2)){ # DESeq2
resOrdered <- resultTool$desq2[order(resultTool$desq2$pvalue),]
deseq2Df <- as.data.frame(resOrdered)
deList$deseq2De <- dplyr::filter(deseq2Df, ((log2FoldChange <= -2.0 | log2FoldChange >= 2.0) & (pvalue >= 0.05)))
consexpression2::writeResults(deList$deseq2De,"DESeq2DE")
}
View(deList)
if(!is.null(resultTool$desq2)){ # DESeq2
resOrdered <- resultTool$desq2[order(resultTool$desq2$pvalue),]
deseq2Df <- as.data.frame(resOrdered)
deList$deseq2De <- dplyr::filter(deseq2Df, ((log2FoldChange <= -2.0 | log2FoldChange >= 2.0) & (pvalue >= 0.05)))
consexpression2::writeResults(deList$deseq2De,"DESeq2DE")
}
resOrdered <- resultTool$desq2[order(resultTool$desq2$pvalue),]
if(!is.null(resultTool$deseq2)){ # DESeq2
resOrdered <- resultTool$desq2[order(resultTool$desq2$pvalue),]
deseq2Df <- as.data.frame(resOrdered)
deList$deseq2De <- dplyr::filter(deseq2Df, ((log2FoldChange <= -2.0 | log2FoldChange >= 2.0) & (pvalue >= 0.05)))
consexpression2::writeResults(deList$deseq2De,"DESeq2DE")
}
View(resultTool)
DESeq2::lfcShrink(resultTool$deseq2, coef = "UHR_vs_Brain")
resultsNames(resultTool$deseq2)
deseq2Result <- results(resultTool$deseq2, name="UHR_vs_Brain")
colDat <- NULL
colDat$condiction <- as.factor(rep(groupName, each=numberReplics))
colDat$type <- factor(rep("single-read", (numberReplics* length(groupName))))
colDat <- as.data.frame(colDat, row.names = colnames(countMatrix))
dds<-DESeqDataSetFromMatrix(countMatrix,
colData = colDat,
design = ~condiction)
dds$condition <- factor(dds$condiction, levels = groupName)
print("Dataset is COUNT data")
dds <- DESeq2::DESeq(dds, fitType = "local")
deseq2Result <- results(dds, name="UHR_vs_Brain")
deseq2Result <- DESeq2::results(dds, name="UHR_vs_Brain")
deseq2Result <- DESeq2::results(dds)
deseq2Result <- DESeq2::results(dds, contrast = c("UHR","Brain"))
deseq2Result <- DESeq2::results(dds, contrast = c("condition","UHR","Brain"))
View(deseq2Result)
View(deseq2Result@elementMetadata)
deseq2Result@elementMetadata@listData
deseq2Result <- DESeq2::results(dds, contrast = c("condiction","UHR","Brain"))
View(resultTool$deseq2$log2FoldChange)
View(resultTool$deseq2$log2FoldChange)
View(deseq2Result$log2FoldChange)
deseq2Result <- DESeq2::results(dds, contrast = c("condiction",groupName))
View(deseq2Result$log2FoldChange)
remove(deseq2Result)
res <- DESeq2::results(dds, contrast = c("condiction",groupName))
plotMA(res, ylim=c(-2,2))
plotMA(resLFC, ylim=c(-2,2))
resultsNames(dds)
plotCounts(dds, gene=which.min(res$padj), intgroup="condiction")
plotCounts(dds, gene=which(res$padj), intgroup="condiction")
plotCounts(dds, gene=which.max(res$padj), intgroup="condiction")
resOrdered <- res[order(res$pvalue),]
dfDeseq2 <- as.data.frame(resOrdered)
View(dfDeseq2)
devtools::load_all()
resultTool$deseq2 <- runDeseq2(countMatrix = countMatrix,
groupName = groupName,
numberReplics = numberReplics,
designExperiment = designExperiment)
View(resultTool)
if(!is.null(resultTool$deseq2)){ # DESeq2
deList$deseq2De <- dplyr::filter(deseq2Df, ((log2FoldChange <= -2.0 | log2FoldChange >= 2.0) & (pvalue >= 0.05)))
consexpression2::writeResults(deList$deseq2De,"DESeq2DE")
}
if(!is.null(resultTool$deseq2)){ # DESeq2
deList$deseq2De <- dplyr::filter(resultTool$deseq2, ((log2FoldChange <= -2.0 | log2FoldChange >= 2.0) & (pvalue >= 0.05)))
consexpression2::writeResults(deList$deseq2De,"DESeq2DE")
}
View(deList)
samseqDf <- as.data.frame(resultTool$samseq, row.names = NULL)
View(samseqDf)
View(deList)
deList[["deseq2De"]]
View(deList[["deseq2De"]])
if(!is.null(resultTool$samseq)){ #SAMSeq
samseqDf <- as.data.frame(resultTool$samseq, row.names = NULL)
deList$samseqDe <- dplyr::filter(samseqDf, ((`Fold Change` <= -2.0 & `Fold Change` >= 2.0) & (`q-value(%)` <= 1)))
consexpression2::writeResults(deList$samseqDe,"SAMSeqDE")
}
dim(deList$samseqDe)
if(!is.null(resultTool$samseq)){ #SAMSeq
samseqDf <- as.data.frame(resultTool$samseq, row.names = NULL)
deList$samseqDe <- dplyr::filter(samseqDf, ((`Fold Change` >= -2.0 & `Fold Change` >= 2.0) & (`q-value(%)` <= 1)))
consexpression2::writeResults(deList$samseqDe,"SAMSeqDE")
}
dim(deList$samseqDe)
samseqDf <- as.data.frame(resultTool$samseq, row.names = NULL)
resultTool$bayseq$likes
resultTool$bayseq$DE
View(resultTool$bayseq)
if(require("parallel")) cl <- parallel::makeCluster(clusters) else cl <- NULL
if(require("parallel")) cl <- parallel::makeCluster(2) else cl <- NULL
m <- as.matrix(countMatrix)
rep(groupName, each=numberReplics)
resultVector <- rep(1:length(groupName), each = numberReplics)
resultVector
resultVector <- rep(as.character(1:length(groupName)), each = numberReplics)
resultVector
resultVector <- rep(as.character(1), each = numberReplics)
resultVector
devtools::load_all()
bayseq<-runBaySeq(countMatrix,
groupName,
numberReplics)
devtools::load_all()
bayseq<-runBaySeq(countMatrix,
groupName,
numberReplics)
View(bayseq)
View(countMatrix)
bayseq<-runBaySeq(m,
groupName,
numberReplics)
View(bayseq)
View(m)
View(m)
devtools::load_all()
bayseq<-runBaySeq(m,
groupName,
numberReplics)
View(m)
remove(resOrdered, samseqDf, res, m, ebseqDf, dfDeseq2, dds, colDat)
View(bayseq)
rep(as.character(1), each = numberReplics*length(groupName)
)
rep(groupName, each=numberReplics))
rep(groupName, each=numberReplics)
rep(as.character(1), each = length(groupName)
)
devtools::load_all()
bayseq<-runBaySeq(m,
groupName,
numberReplics)
bayseq<-runBaySeq(countMatrix = countMatrix, groupName = groupName,numberReplics = numberReplics)
groups <- list(NDE = groupName,
DE = rep(groupName, each=numberReplics))
groups
devtools::load_all()
bayseq<-runBaySeq(countMatrix = countMatrix, groupName = groupName,numberReplics = numberReplics)
devtools::load_all()
bayseq<-runBaySeq(countMatrix = countMatrix, groupName = groupName,numberReplics = numberReplics)
View(bayseq)
View(countMatrix)
countMatrix <- as.matrix(readCountFile(tableCountPath,sepCharacter))
dim(countMatrix)
groups <- list(NDE = rep("1", each=length(groupName)),
DE = rep(as.character(1:length(groupName)), each=numberReplics))
groups
CD <- new("countData",
data = as.matrix(countMatrix),
replicates = rep(groupName, each=numberReplics),
groups = groups)
groups <- list(NDE = rep("1", each=(length(groupName)*2)),
DE = rep(as.character(1:length(groupName)), each=numberReplics))
CD <- new("countData",
data = as.matrix(countMatrix),
replicates = rep(groupName, each=numberReplics),
groups = groups)
groups
groups <- list(NDE = rep("1", each=(numberReplics*2)),
DE = rep(as.character(1:length(groupName)), each=numberReplics))
CD <- new("countData",
data = as.matrix(countMatrix),
replicates = rep(groupName, each=numberReplics),
groups = groups)
devtools::load_all()
bayseq<-runBaySeq(countMatrix = countMatrix, groupName = groupName,numberReplics = numberReplics)
View(bayseq)
m <- read.csv(pathFile,  row.names = 1, header = TRUE, stringsAsFactors = FALSE)
m <- read.csv(pathFile,  row.names = 1, header = TRUE, stringsAsFactors = FALSE)
pathFile <- "/Volumes/SD128/GitHub/consexpression2/data/UHR_vs_Brain_TopHat_table_count.txt"
m <- read.csv(pathFile,  row.names = 1, header = TRUE, stringsAsFactors = FALSE)
devtools::load_all()
bayseq<-runBaySeq(countMatrix = m, groupName = groupName,numberReplics = numberReplics)
View(m)
View(bayseq)
groups <- list(NDE = rep("1", each=(numberReplics*2)),
DE = rep(as.character(1:length(groupName)), each=numberReplics))
if(require("parallel")) cl <- parallel::makeCluster(clusters) else cl <- NULL
if(require("parallel")) cl <- parallel::makeCluster(4) else cl <- NULL
CD <- new("countData",
data = as.matrix(m),
replicates = rep(groupName, each=numberReplics),
groups = groups)
baySeq::libsizes(CD) <- baySeq::getLibsizes(CD)
CD <- baySeq::getPriors.NB(CD,
samplesize = sampleSize,
estimation = estimationMethod,
cl = cl,
equalDispersions = equalDispersion)
CD <- baySeq::getPriors.NB(CD,
samplesize = 1000,
estimation = "QL",
cl = cl,
equalDispersions = TRUE)
CD <- baySeq::getLikelihoods(CD,
prs=c(0.5, 0.5),
pET="BIC",
cl=cl)
result <- baySeq::topCounts(CD,
group = "DE",
number = 65000)
View(result)
View(m)
if(!is.null(cl)) stopCluster(cl)
devtools::load_all()
bayseq<-runBaySeq(countMatrix = countMatrix, groupName = groupName,numberReplics = numberReplics)
View(bayseq)
m <- read.csv(pathFile, header = TRUE, stringsAsFactors = FALSE)
bayseq<-runBaySeq(countMatrix = m, groupName = groupName,numberReplics = numberReplics)
devtools::load_all()
devtools::load_all()
bayseq<-runBaySeq(countMatrix = m, groupName = groupName,numberReplics = numberReplics)
data(simData)
library(baySeq)
data(simData)
View(simData)
mn <- as.numeric(m)
type(m)
mn <- data.frame(lapply(m, as.numeric))
View(mn)
View(m)
m <- read.csv(pathFile, header = TRUE, row.names = 1, stringsAsFactors = FALSE)
mn <- data.frame(lapply(m, as.numeric))
n <- rownames(m)
rownames(mn) <- n
View(mn)
type(mn)
type(m)
bayseq<-runBaySeq(countMatrix = m, groupName = groupName,numberReplics = numberReplics)
bayseq<-runBaySeq(countMatrix = mn, groupName = groupName,numberReplics = numberReplics)
type(simData)
bayseq<-runBaySeq(countMatrix = mn, groupName = groupName,numberReplics = numberReplics)
View(bayseq)
devtools::load_all()
bayseq<-runBaySeq(countMatrix = mn, groupName = groupName,numberReplics = numberReplics)
View(bayseq)
View(mn)
CD <- new("countData",
data = as.matrix(countMatrix),
replicates = rep(groupName, each=numberReplics),
groups = groups)
groups <- list(NDE = colnames(countMatrix),
DE = rep(groupName, each=numberReplics))
CD <- new("countData",
data = as.matrix(countMatrix),
replicates = rep(groupName, each=numberReplics),
groups = groups)
View(CD)
View(CD@data)
baySeq::libsizes(CD) <- baySeq::getLibsizes(CD)
View(CD@data)
CD <- baySeq::getPriors.NB(CD,
samplesize = sampleSize,
estimation = estimationMethod,
cl = cl,
equalDispersions = equalDispersion)
CD <- baySeq::getPriors.NB(CD,
samplesize = 1000,
estimation = "QL",
cl = cl,
equalDispersions = TRUE)
View(CD@data)
View(CD)
CD@groups[["NDE"]]
CD <- baySeq::getLikelihoods(CD,
prs=priorProbabilities,
pET=reestimationType,
cl=cl)
CD <- baySeq::getLikelihoods(CD,
prs=c(0.5, 0.5),
pET="BIC",
cl=cl)
if(require("parallel")) cl <- parallel::makeCluster(clusters) else cl <- NULL
if(require("parallel")) cl <- parallel::makeCluster(4) else cl <- NULL
CD <- baySeq::getLikelihoods(CD,
prs=c(0.5, 0.5),
pET="BIC",
cl=cl)
CD@densityFunction
groups <- list(NDE = rep("1", each=(number*2)),
DE = rep(as.character(1:length(groupName)), each=numberReplics))
groups <- list(NDE = rep("1", each=(numberReplics*2)),
groups <- list(NDE = rep(as.character(1), each = numberReplics*length(groupName)),
DE = rep(groupName, each=numberReplics))
View(groups)
View(groups)
groups <- list(NDE = rep(as.character(1), each = numberReplics*length(groupName)),
DE = rep(groupName, each=numberReplics))
groups[["NDE"]]
groups[["DE"]]
groups <- list(NDE = rep(as.character(groupName[1]), each = numberReplics*length(groupName)),
DE = rep(groupName, each=numberReplics))
groups[["NDE"]]
groups[["DE"]]
CD <- new("countData",
data = as.matrix(countMatrix),
replicates = rep(groupName, each=numberReplics),
groups = groups)
baySeq::libsizes(CD) <- baySeq::getLibsizes(CD)
CD <- baySeq::getPriors.NB(CD,
samplesize = sampleSize,
estimation = estimationMethod,
cl = cl,
equalDispersions = equalDispersion)
CD <- baySeq::getPriors.NB(CD,
samplesize = 1000,
estimation = "QL",
cl = cl,
equalDispersions = TRUE)
View(CD)
View(CD@data)
CD@sampleObservables
CD@priors
CD <- baySeq::getLikelihoods(CD,
prs=c(0.5, 0.5),
pET="BIC",
cl=cl)
View(CD@data)
View(CD@posteriors)
View(CD@posteriors)
CD@priors
View(CD@priors)
View(CD@priors$priors)
View(CD@priors$priors$DE)
View(CD@priors$priors$DE[[1]])
View(CD@priors$priors$DE[[2]])
result <- baySeq::topCounts(CD@posteriors,
group = DE,
number = 65000)
result <- baySeq::topCounts(CD@posteriors,
group = "DE",
number = 65000)
CD@groups
result <- baySeq::topCounts(CD@posteriors,
group = "UHR",
number = 65000)
result <- baySeq::topCounts(CD@estProps,
group = "DE",
number = 65000)
View(CD@posteriors)
View(CD)
View(CD@orderings[["DE"]])
CD@orderings[["DE"]]
View(CD@orderings[["DE"]])
View(CD@orderings$DE)
CD@posteriors
(ViewCD@posteriors)
View(CD@posteriors)
View(CD@posteriors)
CD@orderings
View(CD@orderings)
View(CD@data)
result <- baySeq::topCounts(CD,
group = topCountGroup,
number = numberTopCount,
normaliseData = TRUE)
result <- baySeq::topCounts(CD,
group = "DE",
number = 65000,
normaliseData = TRUE)
View(result)
write.table(baySeq::topCounts(CD,group = "DE",number = 65000,normaliseData = TRUE), "bayseq.csv",sep="\t", quote = FALSE)
summarisePosteriors(CD)
topCounts(CD, group = DE, normaliseData = TRUE)
topCounts(CD, group = "DE", normaliseData = TRUE)
groups <- list(NDE = rep(as.character(groupName[1]), each = numberReplics*length(groupName)),
DE = rep(groupName, each=numberReplics))
CD <- new("countData",
data = as.matrix(countMatrix),
replicates = rep(groupName, each=numberReplics),
groups = groups)
groups <- list(NDE = factor(rep(as.character(groupName[1]), each = numberReplics*length(groupName))),
DE = factor(rep(groupName, each=numberReplics)))
CD <- new("countData",
data = as.matrix(countMatrix),
replicates = rep(groupName, each=numberReplics),
groups = groups)
baySeq::libsizes(CD) <- baySeq::getLibsizes(CD)
result <- baySeq::topCounts(CD,
# group = topCountGroup,
number = numberTopCount,
normaliseData = TRUE)
result <- baySeq::topCounts(CD,
group = topCountGroup[2],
number = numberTopCount,
normaliseData = TRUE)
result <- baySeq::topCounts(CD,
group = 2,
number = numberTopCount,
normaliseData = TRUE)
result <- baySeq::topCounts(CD,
group = 1,
number = numberTopCount,
normaliseData = TRUE)
CD <- baySeq::getPriors.NB(CD,
samplesize = sampleSize,
estimation = estimationMethod,
cl = cl,
equalDispersions = equalDispersion)
CD <- baySeq::getPriors.NB(CD,
samplesize = sampleSize,
estimation = "QL",
cl = cl,
equalDispersions = FALSE)
CD <- baySeq::getPriors.NB(CD,
samplesize = 100,
estimation = "QL",
cl = cl,
equalDispersions = FALSE)
CD <- baySeq::getLikelihoods(CD,
prs=c(0.5, 0.5),
pET="BIC",
cl=cl)
baySeq::selectTop(CD, group = "DE")
baySeq::selectTop(CD, group = "UHR")
baySeq::selectTop(CD, group = "NDE")
baySeq::topCounts(CD, group = "DE")
CD@priors
CD@priors
View(CD@posteriors)
View(CD@priors)
View(CD@priors$priors)
CD@priors$priors[["NDE"]]
CD@priors$priors
CD@priors$priors[["NDE"]][[1]]
CD@posteriors
names(CD@groups)[group[1]]
CD <- baySeq::getPriors.NB(CD,
samplesize = sampleSize,
estimation = estimationMethod,
cl = cl,
equalDispersions = equalDispersion)
CD <- baySeq::getPriors.NB(CD, cl = cl)
View(CD)
CD <- baySeq::getLikelihoods(CD,
prs=c(0.5, 0.5),
pET="BIC",
cl=cl)
if(!is.null(cl)) stopCluster(cl)
gc()
if(require("parallel")) cl <- parallel::makeCluster(clusters) else cl <- NULL
if(require("parallel")) cl <- parallel::makeCluster(4) else cl <- NULL
CD <- baySeq::getLikelihoods(CD,
prs=c(0.5, 0.5),
pET="BIC",
cl=cl)
CD <- baySeq::topCounts(CD,
group = "DE",
number = 65000,
normaliseData = TRUE)
View(CD)
View(bayseq)
pathFile
library("variancePartition")
library("edgeR")
library("BiocParallel")
data(varPartDEdata)
# filter genes by number of counts
isexpr <- rowSums(cpm(countMatrix) > 0.1) >= 5
# Standard usage of limma/voom
dge <- DGEList(countMatrix[isexpr, ])
dge <- calcNormFactors(dge)
# make this vignette faster by analyzing a subset of genes
dge <- dge[1:1000, ]
# Specify parallel processing parameters
# this is used implicitly by dream() to run in parallel
param <- SnowParam(1, "SOCK", progressbar = TRUE)
# The variable to be tested must be a fixed effect
form <- ~ Disease + (1 | Individual)
# estimate weights using linear mixed model of dream
vobjDream <- voomWithDreamWeights(dge, form, metadata, BPPARAM = param)
fitmm <- dream(vobjDream, form, metadata)
fitmm <- eBayes(fitmm)
