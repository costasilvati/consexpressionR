remove(tx2gene)
remove(txi.kallisto)
View(count)
head(txi$counts)
files <- file.path(pathReportFile, "gonoda_checked", count$run, "abundance.tsv")
files
txi
names(files) <- count$run # paste0("gonoda_checked", 1:3)
files
files <- file.path(pathReportFile, "gonoda", count$run, "abundance.tsv")
names(files) <- count$run # paste0("gonoda_checked", 1:3)
files
txi <- tximport(files, type = "kallisto", txOut = TRUE)
head(txi$counts)
ddsTxi <- DESeqDataSetFromTximport(txi,colData = count, design = ~ count$condition)
ddsTxi <- DESeqDataSetFromTximport(txi,colData = count, design = ~ conditionList)
ddsTxi <- DESeqDataSetFromTximport(txi,colData = count, design = ~ conditionList)
library("tximport")
library("readr")
library("tximportData")
library("DESeq2")
ddsTxi <- DESeqDataSetFromTximport(txi,colData = count, design = ~ conditionList)
ddsTxi <- DESeqDataSetFromTximport(txi,colData = count, design = ~ count$condition)
count$condition
count$condition[1]
count$condition[2]
count$condition[3]
count$condition[4]
ddsTxi <- DESeqDataSetFromTximport(txi,colData = count, design = ~conditionList)
txi$countsFromAbundance
count$condition
ddsTxi <- DESeqDataSetFromTximport(txi,colData = count, design = ~conditionList)
use_devtools()
devtools::load_all()
devtools::check()
rlang::last_error()
source("https://bioconductor.org/biocLite.R")
biocLite("DESeq")
devtools::load_all()
devtools::check()
library("tximport")
library("readr")
library("tximportData")
library("DESeq2")
dir <- "/Users/julianacostasilva/Library/CloudStorage/OneDrive-Pessoal/ProjetoDoutorado/bioconvergencia/reads_RNApa/kallisto_quant_align_apa_1B_0B/gonoda/"
pathReportRuns <- "gonoda_report.txt"
pathReportFile <- "/Users/julianacostasilva/Library/CloudStorage/OneDrive-Pessoal/ProjetoDoutorado/bioconvergencia/reads_RNApa/kallisto_quant_align_apa_1B_0B"
conditionList <- c("0b","1b")
replics <- 3
count <- read.table(file.path(pathReportRuns), header=TRUE)
count$condition <- factor(rep(conditionList,each=replics))
rownames(count) <- count$run
count[,c("pop","center","run","condition")]
files <- file.path(pathReportFile, "gonoda", count$run, "abundance.tsv")
names(files) <- count$run # paste0("gonoda_checked", 1:3)
txi <- tximport(files, type = "kallisto", txOut = TRUE)
head(txi$counts)
ddsTxi <- DESeqDataSetFromTximport(txi, colData = count, design = ~conditionList)
ddsTxi <- DESeqDataSetFromTximport(txi, colData = count, design = ~ count$condition)
ddsTxi <- DESeqDataSetFromTximport(txi, colData = count, design = ~ DataFrame(count$condition))
source("/Volumes/SD128/MarieAnne/kallisto_DESeq2.R", echo=TRUE)
count$condition <- factor(rep(conditionList,each=replics))
files <- file.path(pathReportFile, "gonoda", count$run, "abundance.tsv")
names(files) <- count$run # paste0("gonoda_checked", 1:3)
txi <- tximport(files, type = "kallisto", txOut = TRUE)
head(txi$counts)
count$condition <- factor(rep(conditionList,each=replics))
rownames(count) <- count$run
count[,c("pop","center","run","condition")]
files <- file.path(pathReportFile, "gonoda", count$run, "abundance.tsv")
names(files) <- count$run # paste0("gonoda_checked", 1:3)
txi <- tximport(files, type = "kallisto", txOut = TRUE)
head(txi$counts)
ddsTxi <- DESeqDataSetFromTximport(txi, DataFrame(count$condition), ~ count$condition)
txi$length
count$condition
ddsTxi <- DESeqDataSetFromTximport(txi, colData = rownames(txi$counts), design = count$condition)
ddsTxi <- DESeqDataSetFromTximport(txi, colData = row.names(txi$counts), design = count$condition)
txi$counts
colDt <- row.names(txi$counts)
colDt
ddsTxi <- DESeqDataSetFromTximport(txi, colData = colDt, design = count$condition)
ddsTxi <- DESeqDataSetFromTximport(txi, design = count$condition)
ddsTxi <- DESeqDataSetFromTximport(txi = txi)
ddsTxi <- DESeqDataSetFromTximport(txi = txi, colData = count$run)
count$run
ddsTxi <- DESeqDataSetFromTximport(txi = txi, colData = count$condition)
col$condition
count$condition
txi$abundance
ddsTxi <- DESeqDataSetFromTximport(txi = txi, colData = txi$abundance)
ddsTxi <- DESeqDataSetFromTximport(txi = txi$abundance, colData = count$condition)
ddsTxi <- DESeqDataSetFromTximport(txi = txi)
ddsTxi <- DESeqDataSetFromTximport(txi = txi)
library("tximport")
library("readr")
library("tximportData")
library("DESeq2")
dir <- "/Users/julianacostasilva/Library/CloudStorage/OneDrive-Pessoal/ProjetoDoutorado/bioconvergencia/reads_RNApa/kallisto_quant_align_apa_1B_0B/gonoda/"
pathReportRuns <- "gonoda_report.txt"
pathReportFile <- "/Users/julianacostasilva/Library/CloudStorage/OneDrive-Pessoal/ProjetoDoutorado/bioconvergencia/reads_RNApa/kallisto_quant_align_apa_1B_0B"
conditionList <- c("0b","1b")
replics <- 3
count <- read.table(file.path(pathReportRuns), header=TRUE)
count$condition <- factor(rep(conditionList,each=replics))
rownames(count) <- count$run
count[,c("pop","center","run","condition")]
files <- file.path(pathReportFile, "gonoda", count$run, "abundance.tsv")
names(files) <- count$run # paste0("gonoda_checked", 1:3)
txi <- tximport(files, type = "kallisto", txOut = TRUE)
head(txi$counts)
colDt <- row.names(txi$counts)
ddsTxi <- DESeqDataSetFromTximport(txi = txi)
ddsTxi <- DESeqDataSetFromTximport(txi = txi, design = ~conditionList)
ddsTxi <- DESeqDataSetFromTximport(txi, design = ~conditionList)
ddsTxi <- DESeqDataSetFromTximport(txi, design = ~conditionList)
txi$abundance
txi$counts
txi$length
txi$countsFromAbundance
txi$countsFromAbundance = yes
txi$countsFromAbundance = "yes"
txi$countsFromAbundance
ddsTxi <- DESeqDataSetFromTximport(txi, design = ~conditionList)
ddsTxi <- DESeqDataSetFromTximport(txi, design = ~ factor(c('1','1','2','2','3','3')+conditionList)
)
ddsTxi <- DESeqDataSetFromTximport(txi, design = DataFrame(conditionList))
ddsTxi <- DESeqDataSetFromTximport(txi, colData= DataFrame(conditionList))
ddsTxi <- DESeqDataSetFromTximport(txi$abundance, colData= DataFrame(conditionList))
View(count)
sampleTable <- data.frame(condition = factor(count$run))
View(sampleTable)
rownames(sampleTable) <- colnames(txi$counts)
ddsTxi <- DESeqDataSetFromTximport(txi, sampleTable, ~condition)
ddsTxi <- DESeqDataSetFromTximport(txi, sampleTable)
ddsTxi <- DESeqDataSetFromTximport(txi, sampleTable)
library("tximport")
library("readr")
library("tximportData")
library("DESeq2")
dir <- "/Users/julianacostasilva/Library/CloudStorage/OneDrive-Pessoal/ProjetoDoutorado/bioconvergencia/reads_RNApa/kallisto_quant_align_apa_1B_0B/gonoda/"
pathReportRuns <- "gonoda_report.txt"
pathReportFile <- "/Users/julianacostasilva/Library/CloudStorage/OneDrive-Pessoal/ProjetoDoutorado/bioconvergencia/reads_RNApa/kallisto_quant_align_apa_1B_0B"
conditionList <- c("0b","1b")
replics <- 3
count <- read.table(file.path(pathReportRuns), header=TRUE)
count$condition <- factor(rep(conditionList,each=replics))
rownames(count) <- count$run
count[,c("pop","center","run","condition")]
files <- file.path(pathReportFile, "gonoda", count$run, "abundance.tsv")
names(files) <- count$run # paste0("gonoda_checked", 1:3)
txi <- tximport(files, type = "kallisto", txOut = TRUE)
head(txi$counts)
# countData <- matrix(1:100,ncol=4)
# condition <- factor(c("A","A","B","B"))
# dds <- DESeqDataSetFromMatrix(countData, DataFrame(condition), ~ condition)
sampleTable <- data.frame(condition = factor(count$run))
rownames(sampleTable) <- colnames(txi$counts)
ddsTxi <- DESeqDataSetFromTximport(txi, sampleTable)
View(sampleTable)
ddsTxi <- DESeqDataSetFromTximport(txi, design = sampleTable)
ddsTxi <- DESeqDataSetFromTximport(txi, design = 1, colData = sampleTable)
ddsTxi <- DESeqDataSetFromTximport(txi, design = l, colData = sampleTable)
ddsTxi <- DESeqDataSetFromTximport(txi, design = ~ 1, colData = sampleTable)
library(devtools)
use_package("tximport")
use_package("DESeq2")
use_package("tximportData")
use_package("readr")
source("/Volumes/SD128/MarieAnne/kallisto_DESeq2.R", echo=TRUE)
View(count)
View(count)
devtools::load_all()
devtools::check()
?match()
library(devtools)
devtools::load_all()
devtools::check()
consexpression2(numberReplics=3,
groupName= c("0b", "1b"),
tableCountPath="tablecount.csv",
split="\t",
experimentName="genericExperiment",
outDirPath="results/",
methodNorm = "TMM", methodAdjPvalue = "BH", numberTopTable = 1000000)
consexpression2(numberReplics=3,
groupName= c("0b", "1b"),
tableCountPath="tablecount.csv",
split="\t",
experimentName="genericExperiment",
outDirPath="results/",
methodNorm = "TMM", methodAdjPvalue = "BH", numberTopTable = 1000000)
devtools::load_all()
devtools::check()
consexpression2(numberReplics=3,
groupName= c("0b", "1b"),
tableCountPath="tablecount.csv",
split="\t",
experimentName="genericExperiment",
outDirPath="results/",
methodNorm = "TMM", methodAdjPvalue = "BH", numberTopTable = 1000000)
devtools::load_all()
consexpression2(numberReplics=3,
groupName= c("0b", "1b"),
tableCountPath="tablecount.csv",
split="\t",
experimentName="genericExperiment",
outDirPath="results/",
methodNorm = "TMM", methodAdjPvalue = "BH", numberTopTable = 1000000)
consexpression2(numberReplics=3,
groupName= c("0b", "1b"),
tableCountPath="tablecount.csv",
split="\t",
experimentName="genericExperiment",
outDirPath="results/",
methodNorm = "TMM", methodAdjPvalue = "BH", numberTopTable = 1000000)
consexpression2(numberReplics=3,
groupName= c("0b", "1b"),
tableCountPath="tablecount.csv",
split="\t",
experimentName="genericExperiment",
outDirPath="results/",
methodNorm = "TMM", methodAdjPvalue = "BH", numberTopTable = 1000000)
devtools::load_all()
consexpression2(numberReplics=3,
groupName= c("0b", "1b"),
tableCountPath="tablecount.csv",
split="\t",
experimentName="genericExperiment",
outDirPath="results/",
methodNorm = "TMM", methodAdjPvalue = "BH", numberTopTable = 1000000)
consexpression2(numberReplics=3,
groupName= c("0b", "1b"),
tableCountPath="tablecount.csv",
split="\t",
experimentName="genericExperiment",
outDirPath="results/",
methodNorm = "TMM", methodAdjPvalue = "BH", numberTopTable = 1000000)
devtools::load_all()
consexpression2(numberReplics=3,
groupName= c("0b", "1b"),
tableCountPath="tablecount.csv",
split="\t",
experimentName="genericExperiment",
outDirPath="results/",
methodNorm = "TMM", methodAdjPvalue = "BH", numberTopTable = 1000000)
devtools::load_all()
consexpression2(numberReplics=3,
groupName= c("0b", "1b"),
tableCountPath="tablecount.csv",
split="\t",
experimentName="genericExperiment",
outDirPath="results/",
methodNorm = "TMM", methodAdjPvalue = "BH", numberTopTable = 1000000)
devtools::load_all()
consexpression2(numberReplics=3,
groupName= c("0b", "1b"),
tableCountPath="tablecount.csv",
split="\t",
experimentName="genericExperiment",
outDirPath="results/",
methodNorm = "TMM", methodAdjPvalue = "BH", numberTopTable = 1000000)
devtools::load_all()
consexpression2(numberReplics=3,
groupName= c("0b", "1b"),
tableCountPath="tablecount.csv",
split="\t",
experimentName="genericExperiment",
outDirPath="results/",
methodNorm = "TMM", methodAdjPvalue = "BH", numberTopTable = 1000000)
library(devtools)
devtools::load_all()
consexpression2 (numberReplics=3,
groupName= c("0b", "1b"),
tableCountPath="tablecount.csv",
split="\t",
experimentName="genericExperiment",
outDirPath="results/",
methodNorm = "TMM", methodAdjPvalue = "BH", numberTopTable = 1000000)
devtools::load_all()
consexpression2 (numberReplics=3,
groupName= c("0b", "1b"),
tableCountPath="tablecount.csv",
split="\t",
experimentName="genericExperiment",
outDirPath="results/",
methodNorm = "TMM", methodAdjPvalue = "BH", numberTopTable = 1000000)
devtools::load_all()
numberReplics=3,
numberReplics=3
groupName= c("0b", "1b")
tableCountPath="tablecount.csv"
sepCharacter="\t"
experimentName="genericExperiment"
outDirPath="consexpression2_results/"
methodNorm = "TMM"
methodAdjPvalue = "BH"
numberTopTable = 1000000
printResults=FALSE
countMatrix <- readCountFile(tableCountPath,
sepCharacter)
designExperiment <- rep(groupName,
each = numberReplics)
result <- NULL
edgerResult<-runEdger(countMatrix,
numberReplics,
designExperiment)
result(edger)<-edgerResult
result.edger<-edgerResult
result.limma<-runLimma(countMatrix,
numberReplics,
designExperiment,
methodNorm,
methodAdjPvalue,
numberTopTable)
result.noiseq<-runNoiSeq(countMatrix,
designExperiment)
View(result)
result$edger <- result.edger
View(result)
devtools::load_all()
View(result)
View(result.edger)
remove(result.edger)
remove(result.limma)
remove(result.noiseq)
View(result)
devtools::load_all()
typeof(result)
typeof(result[1])
devtools::load_all()
remove(edgerResult)
numberReplics=3,
numberReplics=3
groupName= c("0b", "1b")
tableCountPath="tablecount.csv"
sepCharacter="\t"
experimentName="genericExperiment"
outDirPath="consexpression2_results/"
methodNorm = "TMM"
methodAdjPvalue = "BH"
numberTopTable = 1000000
printResults=FALSE
source("~/.active-rstudio-document")
setwd("~/GitHub/consexpression2/")
numberReplics=3
groupName= c("0b", "1b")
tableCountPath="tablecount.csv"
sepCharacter="\t"
experimentName="genericExperiment"
outDirPath="consexpression2_results/"
methodNorm = "TMM"
methodAdjPvalue = "BH"
numberTopTable = 1000000
printResults=FALSE
.
# install.packages("styler") # formata
# https://cran.r-project.org/doc/manuals/R-exts.html#Creating-R-packages
# http://bioconductor.org/developers/package-submission/
# https://www.bioconductor.org/developers/how-to/coding-style/
# Livro R Packages - https://r-pkgs.org/
library(devtools)
# Set to local code path
setwd("~/GitHub/consexpression2/")
# variables
numberReplics=3
groupName= c("0b", "1b")
tableCountPath="tablecount.csv"
sepCharacter="\t"
experimentName="genericExperiment"
outDirPath="consexpression2_results/"
methodNorm = "TMM"
methodAdjPvalue = "BH"
numberTopTable = 1000000
printResults=FALSE
# Command to load current version of package
devtools::load_all()
# Execute partial functions
countMatrix <- readCountFile(tableCountPath,
sepCharacter)
designExperiment <- rep(groupName,
each = numberReplics)
result <- NULL
result$edger<-runEdger(countMatrix,
numberReplics,
designExperiment)
View(result)
result$limma<-runLimma(countMatrix,
numberReplics,
designExperiment,
methodNorm,
methodAdjPvalue,
numberTopTable)
View(result)
result$noiseq<-runNoiSeq(countMatrix,
designExperiment)
View(result)
result$ebseq <- runEbseq(countMatrix,
numberReplics,
designExperiment)
result$ebseq <- runEbseq(countMatrix,
numberReplics,
designExperiment)
result$ebseq <- runEbseq(countMatrix,
numberReplics,
designExperiment)
max=5
result$ebseq <- runEbseq(countMatrix,
numberReplics,
designExperiment, maxRound = max)
devtools::load_all()
result$ebseq <- runEbseq(countMatrix,
numberReplics,
designExperiment, maxRound = max)
typeof(max)
max='5'
typeof(max)
result$ebseq <- runEbseq(countMatrix,
numberReplics,
designExperiment, maxRound = max)
devtools::load_all()
typeof(max)
devtools::load_all()
result$ebseq <- runEbseq(countMatrix,
numberReplics,
designExperiment, maxRound = max)
devtools::load_all()
devtools::check()
result$ebseq <- runEbseq(countMatrix,
numberReplics,
designExperiment, maxRound = max)
result$ebseq <- runEbseq(countMatrix,
numberReplics,
designExperiment, max = max)
devtools::check()
devtools::load_all()
result$ebseq <- runEbseq(countMatrix,
numberReplics,
designExperiment, max = max)
result$ebseq <- runEbseq(countMatrix,
numberReplics,
designExperiment)
result$ebseq <- runEbseq(countMatrix,
numberReplics,
designExperiment, max = max)
devtools::load_all()
devtools::check()
result$ebseq <- runEbseq(countMatrix,
numberReplics,
designExperiment, max = max)
result$ebseq <- runEbseq(countMatrix,
numberReplics,
designExperiment)
devtools::check()
result$ebseq <- runEbseq(countMatrix,
numberReplics,
designExperiment)
devtools::load_all()
devtools::check()
result$ebseq <- runEbseq(countMatrix,
numberReplics,
designExperiment)
vignette(EBSeq::EBTest())
vignette(EBSeq::EBTest
)
vignette(EBSeq)
result$ebseq <- runEbseq(countMatrix, designExperiment)
batch
result$desq2 <- runDeseq2(countMatrix,
designExperiment)
result$desq2 <- runDeseq2(countMatrix, designExperiment)
result$desq2 <- runDeseq2(countMatrix,
designExperiment)
devtools::load_all()
result$desq2 <- runDeseq2(countMatrix,
designExperiment)
dds <-DESeq2::DESeqDataSetFromMatrix(countData = countMatrix,colData = designExperiment,design= ~ batch + condition)
dds <-DESeq2::DESeqDataSetFromMatrix(countMatrix,
DataFrame(designExperiment),
design= designExperiment)
View(ddsTxi)
dds <-DESeq2::DESeqDataSetFromMatrix(countData = countMatrix,colData = designExperiment,design= ~1)
control = factor(c(rep("Control",5),NA,NA))
affected=  factor(c(rep("Affected",7)))
dds<-DESeqDataSetFromMatrix(
countData=countMatrix,
design =~control+affected,
colData=data.frame(
control=control,
affected=affected
))
View(affected)
dds <-DESeq2::DESeqDataSetFromMatrix(countData = countMatrix,
colData = factor(designExperiment),
design= designExperiment)
View(countMatrix)
View(count)
dds <-DESeq2::DESeqDataSetFromMatrix(countData = countMatrix,
colData = colnames(countMatrix),
design= designExperiment)
count <- readCountFile(tableCountPath,
sepCharacter)
countMatrix <- DataFrame(count, row.names = 1)
countMatrix <- DataFrame(count)
dds <-DESeq2::DESeqDataSetFromMatrix(countData = countMatrix,
colData = colnames(countMatrix),
design= designExperiment)
rownames(countMatrix) <- count$run
rownames(countMatrix) <- countMatrix$run
dds <- DESeq2::DESeqDataSetFromMatrix(countMatrix, countMatrix, design = designExperiment)
dds <- DESeq2::DESeqDataSetFromMatrix(countMatrix, countMatrix, design = designExperiment, countData = countMatrix)
dds <- DESeq2::DESeqDataSetFromMatrix(countData = countMatrix, colData = countMatrix, design = designExperiment)
