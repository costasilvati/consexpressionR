selectInput(inputId = "sepCharcterInp",
label = "Choose a separator:",
choices = c("TAB" = "\t", "Comma-separated"=","),),
# Input: Select a file ----
fileInput(inputId = "tableCountInp",
label = "Select a table count file (extension .CSV)",
multiple = FALSE,
accept = c("text/csv",
"text/comma-separated-values,text/plain",
".csv")),
# helpText("Note: while the data view will show only the specified", "number of replics, the summary will still be based","on the full dataset."),
actionButton("confirmModel", "Go to expression analysis", class="btn-primary", disable=TRUE)
#actionButton("action", "Button"),
#actionButton("action2", "Button2", class = "btn-primary")
)
),
fluidRow(
title = "Read Data", status = "primary", solidHeader = TRUE,
DT::dataTableOutput("sample")
),
useShinyjs()
),
tabItem(tabName = "parameters",
h2("Set parameters of gene expression tools")
),
tabItem(tabName = "geneExpression",
h2("Expression Analysis"))
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
options(shiny.maxRequestSize=30*1024^2)
df_upload <- reactive({
inFile <- input$tableCountInp
if (is.null(inFile))
return(NULL)
df <- readCountFile(inFile$datapath, input$sepCharcterInp)
observe({
shinyjs::enable("confirmModel", condition = !is.null(df_upload))
})
return(df)
})
designExperiment <- reactive({
validate(
need(input$groupName != "", "Please type a list of treatment names separeted by comma.")
)
groupName <- c(unlist(strsplit(input$groupName, ",")))
nr <- input$numberReplicsInp
d <- rep(groupName, each=nr)
return(d)
})
output$designExperiment <- renderPrint({
ds <- designExperiment()
df <- df_upload()
if(!is.null(df)){
if(length(ds) != dim(df)[2]){
ds <- "Error! File need has number of columns equal replics * groups length."
}else{
output$sample<- DT::renderDataTable({
df <- df_upload()
DT::datatable(df)
})
}
}
print(ds)
})
}
# Run the application
shinyApp(ui = ui, server = server)
}
runConsexpression2()
library(shiny)
library(shinydashboard)
library(shinyjs)
library(DT)
#' Execute app shinny version
#'
#' @return void
#' @export
#'
#' @examples runConsexpression2()
runConsexpression2 <- function(){
# Define UI for application that draws a histogram
ui <- dashboardPage(
dashboardHeader(title = "consexpression2"),
dashboardSidebar(
sidebarMenu(
menuItem("Load Dataset", tabName = "load", icon = icon("upload")),
menuItem("Parameters", tabName = "parameters", icon = icon("gears")),
menuItem("Gene Expression", tabName = "geneExpression", icon = icon("magnifying-glass-chart"))
)
),
dashboardBody(
tabItems(
tabItem(tabName="load",
fluidRow(
box(
title = "Experiment Design", status = "warning", solidHeader = TRUE,
# outDirPath="consexpression2_results/",
# methodNorm = "TMM",
# methodAdjPvalue = "BH",
# numberTopTable = 1000000,
# printResults=FALSE,
# kallistoReport = "report.txt",
# kallistoDir = "kallisto_quant",
# kallistoSubDir = "expermient_kallisto",
# kallistoOut = "abundance.tsv"
textInput(inputId = "experimentNameInp", label="Experiment Name", value="genericExperiment", placeholder = "genericExperiment"),
numericInput(inputId = "numberReplicsInp",label="Number of Replics", value= 1, min = 1),
helpText("Note: This tool expect the same number of replics in each group of treatment."),
numericInput(inputId ="qtdGroupInp",label="Number of Treatment Groups",value= 2, min = 2),
textInput("groupName", label="Treatment Names", placeholder ="Treat1, Treat2, Treat3"),
helpText("Note: Comma separeted list by sample treatment names."),
tags$p("Group and Sample configiguration in file need be:"),
textOutput("designExperiment"),
# Input: Selector for choosing dataset ----
),
box(
title = "File Reader Configuration", status = "primary", solidHeader = TRUE,
selectInput(inputId = "sepCharcterInp",
label = "Choose a separator:",
choices = c("TAB" = "\t", "Comma-separated"=","),),
# Input: Select a file ----
fileInput(inputId = "tableCountInp",
label = "Select a table count file (extension .CSV)",
multiple = FALSE,
accept = c("text/csv",
"text/comma-separated-values,text/plain",
".csv")),
# helpText("Note: while the data view will show only the specified", "number of replics, the summary will still be based","on the full dataset."),
actionButton("confirmModel", "Go to expression analysis", class="btn-primary", hidden=TRUE
#actionButton("action", "Button"),
#actionButton("action2", "Button2", class = "btn-primary")
)
),
fluidRow(
title = "Read Data", status = "primary", solidHeader = TRUE,
DT::dataTableOutput("sample")
),
useShinyjs()
),
tabItem(tabName = "parameters",
h2("Set parameters of gene expression tools")
),
tabItem(tabName = "geneExpression",
h2("Expression Analysis"))
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
library(shiny)
library(shinydashboard)
library(shinyjs)
library(DT)
#' Execute app shinny version
#'
#' @return void
#' @export
#'
#' @examples runConsexpression2()
runConsexpression2 <- function(){
# Define UI for application that draws a histogram
ui <- dashboardPage(
dashboardHeader(title = "consexpression2"),
dashboardSidebar(
sidebarMenu(
menuItem("Load Dataset", tabName = "load", icon = icon("upload")),
menuItem("Parameters", tabName = "parameters", icon = icon("gears")),
menuItem("Gene Expression", tabName = "geneExpression", icon = icon("magnifying-glass-chart"))
)
),
dashboardBody(
tabItems(
tabItem(tabName="load",
fluidRow(
box(
title = "Experiment Design", status = "warning", solidHeader = TRUE,
# outDirPath="consexpression2_results/",
# methodNorm = "TMM",
# methodAdjPvalue = "BH",
# numberTopTable = 1000000,
# printResults=FALSE,
# kallistoReport = "report.txt",
# kallistoDir = "kallisto_quant",
# kallistoSubDir = "expermient_kallisto",
# kallistoOut = "abundance.tsv"
textInput(inputId = "experimentNameInp", label="Experiment Name", value="genericExperiment", placeholder = "genericExperiment"),
numericInput(inputId = "numberReplicsInp",label="Number of Replics", value= 1, min = 1),
helpText("Note: This tool expect the same number of replics in each group of treatment."),
numericInput(inputId ="qtdGroupInp",label="Number of Treatment Groups",value= 2, min = 2),
textInput("groupName", label="Treatment Names", placeholder ="Treat1, Treat2, Treat3"),
helpText("Note: Comma separeted list by sample treatment names."),
tags$p("Group and Sample configiguration in file need be:"),
textOutput("designExperiment"),
# Input: Selector for choosing dataset ----
),
box(
title = "File Reader Configuration", status = "primary", solidHeader = TRUE,
selectInput(inputId = "sepCharcterInp",
label = "Choose a separator:",
choices = c("TAB" = "\t", "Comma-separated"=","),),
# Input: Select a file ----
fileInput(inputId = "tableCountInp",
label = "Select a table count file (extension .CSV)",
multiple = FALSE,
accept = c("text/csv",
"text/comma-separated-values,text/plain",
".csv")),
# helpText("Note: while the data view will show only the specified", "number of replics, the summary will still be based","on the full dataset."),
actionButton("confirmModel", "Go to expression analysis", class="btn-primary", hidden=TRUE)
#actionButton("action", "Button"),
#actionButton("action2", "Button2", class = "btn-primary")
)
),
fluidRow(
title = "Read Data", status = "primary", solidHeader = TRUE,
DT::dataTableOutput("sample")
),
useShinyjs()
),
tabItem(tabName = "parameters",
h2("Set parameters of gene expression tools")
),
tabItem(tabName = "geneExpression",
h2("Expression Analysis"))
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
options(shiny.maxRequestSize=30*1024^2)
df_upload <- reactive({
inFile <- input$tableCountInp
if (is.null(inFile))
return(NULL)
df <- readCountFile(inFile$datapath, input$sepCharcterInp)
observe({
shinyjs::enable("confirmModel", condition)
})
return(df)
})
designExperiment <- reactive({
validate(
need(input$groupName != "", "Please type a list of treatment names separeted by comma.")
)
groupName <- c(unlist(strsplit(input$groupName, ",")))
nr <- input$numberReplicsInp
d <- rep(groupName, each=nr)
return(d)
})
output$designExperiment <- renderPrint({
ds <- designExperiment()
df <- df_upload()
if(!is.null(df)){
if(length(ds) != dim(df)[2]){
ds <- "Error! File need has number of columns equal replics * groups length."
}else{
output$sample<- DT::renderDataTable({
df <- df_upload()
DT::datatable(df)
})
}
}
print(ds)
})
}
# Run the application
shinyApp(ui = ui, server = server)
}
runConsexpression2()
library(shiny)
library(shinydashboard)
library(shinyjs)
library(DT)
#' Execute app shinny version
#'
#' @return void
#' @export
#'
#' @examples runConsexpression2()
runConsexpression2 <- function(){
# Define UI for application that draws a histogram
ui <- dashboardPage(
dashboardHeader(title = "consexpression2"),
dashboardSidebar(
sidebarMenu(
menuItem("Load Dataset", tabName = "load", icon = icon("upload")),
menuItem("Parameters", tabName = "parameters", icon = icon("gears")),
menuItem("Gene Expression", tabName = "geneExpression", icon = icon("magnifying-glass-chart"))
)
),
dashboardBody(
tabItems(
tabItem(tabName="load",
fluidRow(
box(
title = "Experiment Design", status = "warning", solidHeader = TRUE,
# outDirPath="consexpression2_results/",
# methodNorm = "TMM",
# methodAdjPvalue = "BH",
# numberTopTable = 1000000,
# printResults=FALSE,
# kallistoReport = "report.txt",
# kallistoDir = "kallisto_quant",
# kallistoSubDir = "expermient_kallisto",
# kallistoOut = "abundance.tsv"
textInput(inputId = "experimentNameInp", label="Experiment Name", value="genericExperiment", placeholder = "genericExperiment"),
numericInput(inputId = "numberReplicsInp",label="Number of Replics", value= 1, min = 1),
helpText("Note: This tool expect the same number of replics in each group of treatment."),
numericInput(inputId ="qtdGroupInp",label="Number of Treatment Groups",value= 2, min = 2),
textInput("groupName", label="Treatment Names", placeholder ="Treat1, Treat2, Treat3"),
helpText("Note: Comma separeted list by sample treatment names."),
tags$p("Group and Sample configiguration in file need be:"),
textOutput("designExperiment"),
# Input: Selector for choosing dataset ----
),
box(
title = "File Reader Configuration", status = "primary", solidHeader = TRUE,
selectInput(inputId = "sepCharcterInp",
label = "Choose a separator:",
choices = c("TAB" = "\t", "Comma-separated"=","),),
# Input: Select a file ----
fileInput(inputId = "tableCountInp",
label = "Select a table count file (extension .CSV)",
multiple = FALSE,
accept = c("text/csv",
"text/comma-separated-values,text/plain",
".csv")),
# helpText("Note: while the data view will show only the specified", "number of replics, the summary will still be based","on the full dataset."),
disbled(actionButton("confirmModel", "Go to expression analysis", class="btn-primary", hidden=TRUE))
#actionButton("action", "Button"),
#actionButton("action2", "Button2", class = "btn-primary")
)
),
fluidRow(
title = "Read Data", status = "primary", solidHeader = TRUE,
DT::dataTableOutput("sample")
),
useShinyjs()
),
tabItem(tabName = "parameters",
h2("Set parameters of gene expression tools")
),
tabItem(tabName = "geneExpression",
h2("Expression Analysis"))
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
options(shiny.maxRequestSize=30*1024^2)
df_upload <- reactive({
inFile <- input$tableCountInp
if (is.null(inFile))
return(NULL)
df <- readCountFile(inFile$datapath, input$sepCharcterInp)
observe({
shinyjs::enable("confirmModel", condition)
})
return(df)
})
designExperiment <- reactive({
validate(
need(input$groupName != "", "Please type a list of treatment names separeted by comma.")
)
groupName <- c(unlist(strsplit(input$groupName, ",")))
nr <- input$numberReplicsInp
d <- rep(groupName, each=nr)
return(d)
})
output$designExperiment <- renderPrint({
ds <- designExperiment()
df <- df_upload()
if(!is.null(df)){
if(length(ds) != dim(df)[2]){
ds <- "Error! File need has number of columns equal replics * groups length."
}else{
output$sample<- DT::renderDataTable({
df <- df_upload()
DT::datatable(df)
})
}
}
print(ds)
})
}
# Run the application
shinyApp(ui = ui, server = server)
}
runConsexpression2()
library(shiny)
library(shinydashboard)
library(shinyjs)
library(DT)
#' Execute app shinny version
#'
#' @return void
#' @export
#'
#' @examples runConsexpression2()
runConsexpression2 <- function(){
# Define UI for application that draws a histogram
ui <- dashboardPage(
dashboardHeader(title = "consexpression2"),
dashboardSidebar(
sidebarMenu(
menuItem("Load Dataset", tabName = "load", icon = icon("upload")),
menuItem("Parameters", tabName = "parameters", icon = icon("gears")),
menuItem("Gene Expression", tabName = "geneExpression", icon = icon("magnifying-glass-chart"))
)
),
dashboardBody(
tabItems(
tabItem(tabName="load",
fluidRow(
box(
title = "Experiment Design", status = "warning", solidHeader = TRUE,
# outDirPath="consexpression2_results/",
# methodNorm = "TMM",
# methodAdjPvalue = "BH",
# numberTopTable = 1000000,
# printResults=FALSE,
# kallistoReport = "report.txt",
# kallistoDir = "kallisto_quant",
# kallistoSubDir = "expermient_kallisto",
# kallistoOut = "abundance.tsv"
textInput(inputId = "experimentNameInp", label="Experiment Name", value="genericExperiment", placeholder = "genericExperiment"),
numericInput(inputId = "numberReplicsInp",label="Number of Replics", value= 1, min = 1),
helpText("Note: This tool expect the same number of replics in each group of treatment."),
numericInput(inputId ="qtdGroupInp",label="Number of Treatment Groups",value= 2, min = 2),
textInput("groupName", label="Treatment Names", placeholder ="Treat1, Treat2, Treat3"),
helpText("Note: Comma separeted list by sample treatment names."),
tags$p("Group and Sample configiguration in file need be:"),
textOutput("designExperiment"),
# Input: Selector for choosing dataset ----
),
box(
title = "File Reader Configuration", status = "primary", solidHeader = TRUE,
selectInput(inputId = "sepCharcterInp",
label = "Choose a separator:",
choices = c("TAB" = "\t", "Comma-separated"=","),),
# Input: Select a file ----
fileInput(inputId = "tableCountInp",
label = "Select a table count file (extension .CSV)",
multiple = FALSE,
accept = c("text/csv",
"text/comma-separated-values,text/plain",
".csv")),
# helpText("Note: while the data view will show only the specified", "number of replics, the summary will still be based","on the full dataset."),
disabled(actionButton("confirmModel", "Go to expression analysis", class="btn-primary", hidden=TRUE))
#actionButton("action", "Button"),
#actionButton("action2", "Button2", class = "btn-primary")
)
),
fluidRow(
title = "Read Data", status = "primary", solidHeader = TRUE,
DT::dataTableOutput("sample")
),
useShinyjs()
),
tabItem(tabName = "parameters",
h2("Set parameters of gene expression tools")
),
tabItem(tabName = "geneExpression",
h2("Expression Analysis"))
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
options(shiny.maxRequestSize=30*1024^2)
df_upload <- reactive({
inFile <- input$tableCountInp
if (is.null(inFile))
return(NULL)
df <- readCountFile(inFile$datapath, input$sepCharcterInp)
observe({
shinyjs::enable("confirmModel", condition)
})
return(df)
})
designExperiment <- reactive({
validate(
need(input$groupName != "", "Please type a list of treatment names separeted by comma.")
)
groupName <- c(unlist(strsplit(input$groupName, ",")))
nr <- input$numberReplicsInp
d <- rep(groupName, each=nr)
return(d)
})
output$designExperiment <- renderPrint({
ds <- designExperiment()
df <- df_upload()
if(!is.null(df)){
if(length(ds) != dim(df)[2]){
ds <- "Error! File need has number of columns equal replics * groups length."
}else{
output$sample<- DT::renderDataTable({
df <- df_upload()
DT::datatable(df)
})
}
}
print(ds)
})
}
# Run the application
shinyApp(ui = ui, server = server)
}
runConsexpression2()
