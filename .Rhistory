ggvenn(
x,
fill_color = c("#0073C2FF", "#EFC000FF", "#868686FF", "#CD534CFF"),
stroke_size = 0.5, set_name_size = 4
)
View(x)
View(x$A)
x$A
xDe$A<- row.names(teste$edger)
xDe$A<- row.names(teste$edger)
xDe <- NULL
xDe$A<- row.names(teste$edger)
remove(xDE)
xDe$D <- row.names(teste$ebseq)
remove(xDe)
xDe <- NULL
xDe <- NULL
xDe$edgeR <- row.names(deList$edgerDe)
xDe$limma <- row.names(deList$limmaDe)
xDe$NOISeq <- row.names(deList$noiseqDe)
xDe$ebSeq <- row.names(deList$ebseqDe)
xDe$DESeq2 <- row.names(deList$deseq2De)
ggvenn(
xDe,
fill_color = c("#0073C2FF", "#EFC000FF", "#868686FF", "#CD534CFF"),
stroke_size = 0.5, set_name_size = 4)
library("ggVennDiagram")
install.packages("ggVenDiagram")
install.packages("ggVenDiagram", force=TRUE
)
library(VennDiagram)
venn.diagram(xDe, filename = "venn-4-dimensions.png")
# Helper function to display Venn diagram
display_venn <- function(x, ...){
library(VennDiagram)
grid.newpage()
venn_object <- venn.diagram(x, filename = NULL, ...)
grid.draw(venn_object)
}
display_venn(
x,
category.names = c("Set 1" , "Set 2 " , "Set 3", "Set 4"),
# Circles
lwd = 2,
lty = 'blank',
fill = c("#999999", "#E69F00", "#56B4E9", "#009E73"),
# Numbers
cex = .9,
fontface = "italic",
# Set names
cat.cex = 1,
cat.fontface = "bold",
cat.default.pos = "outer",
cat.dist = c(0.055, 0.055, 0.1, 0.1)
)
display_venn(
xDe,
category.names = c("edgeR" , "limma " , "NOISeq", "ebSeq", "DESeq2"),
# Circles
lwd = 2,
lty = 'blank',
fill = c("#999999", "#E69F00", "#56B4E9", "#009E73", "#001E73"),
# Numbers
cex = .9,
fontface = "italic",
# Set names
cat.cex = 1,
cat.fontface = "bold",
cat.default.pos = "outer",
cat.dist = c(0.055, 0.055, 0.1, 0.1)
)
ggvenn(
xDe,
fill_color = c("#0073C2FF", "#EFC000FF", "#868686FF", "#CD534CFF", "#CD534C00"),
stroke_size = 0.5, set_name_size = 4)
ggvenn(
xDe,
fill_color = c("#0073C2FF", "#EFC000FF", "#868686FF", "#CD534CFF", "#CD534C00"),
stroke_size = 0.5, set_name_size = 5)
library(ggvenn)
ggvenn(
xDe,
fill_color = c("#0073C2FF", "#EFC000FF", "#868686FF", "#CD534CFF"),
stroke_size = 0.2, set_name_size = 4)
#-------- venn package ---------------------------
install.packages("VennDiagram")
install.packages("VennDiagram")
#-------- venn package ---------------------------
install.packages("venn")
venn::venn(5)
venn::venn(4)
venn::venn(6)
venn::venn(6, elipse=TRUE)
venn::venn(6, elipse=TRUE)
venn::venn(6, ellipse=TRUE)
venn::venn(6, ellipse=TRUE)
venn::venn(6, ellipse=TRUE)
venn(6, ellipse=TRUE)
venn(6, ellipse=TRUE)
library("venn")
venn(5, ellipse = TRUE)
venn(xDE, ellipse = TRUE)
venn(xDE, ellipse = TRUE, ilabels = TRUE, zcolor = "style")
venn(5, ellipse = TRUE, ilabels = TRUE, zcolor = "style")
venn(5, ellipse = FALSE, ilabels = TRUE, zcolor = "style")
set.seed(12345)
x <- as.data.frame(matrix(sample(0:1, 150, replace = TRUE), ncol = 5))
venn(x, ilabels = "counts")
View(x)
venn(xDe, ilabels = "counts", ggplot = TRUE)
library("ggplot2")
venn(xDe, ilabels = "counts", ggplot = TRUE)
venn(xDe, ggplot = TRUE)
venn(xDe)
venn(xDe, zcolor = "style")
venn(xDe, zcolor = "style", ellipse = TRUE)
venn(xDe, zcolor = c("#999999", "#E69F00", "#56B4E9", "#009E73", "#001E73"), ellipse = TRUE)
venn(xDe, borders= FALSE,zcolor = c("#999999", "#E69F00", "#56B4E9", "#009E73", "#001E73"), ellipse = TRUE)
venn(xDe, borders= FALSE,zcolor = "style", ellipse = TRUE)
venn(xDe, borders = TRUE, zcolor = "style", ellipse = TRUE)
venn(xDe, borders = FALSE, zcolor = "style", ellipse = TRUE)
remove(x)
vennObj <- venn(xDe, borders = FALSE, zcolor = "style", ellipse = TRUE)
for (variable in deList) {
e <- row.names(variable)
}
e
for (variable in deList) {
print("-- " + variable)
}
for (variable in deList) {
print("-- ",variable)
}
for (variable in deList) {
print(variable)
}
names <- colnames(deList)
is.null(xDe$samseq)
devtools::load_all()
devtools::load_all()
devtools::check()
devtools::load_all()
vennDiagramDe(deList, "results/vennDiagram_gonoda.pdf")
devtools::load_all()
vennDiagramDe(deList, "results/vennDiagram_gonoda.pdf")
devtools::load_all()
remove(ebseqDf)
remove(deseq2Df)
remove(resOrdered)
remove(variable)
gonodaDeList < deList
gonodaDeList <- deList
remove(deList)
gonodaDeTool <- deTool
remove(deTool)
gonodaCountMatrix <- teste
remove(teste)
gonodaVennObj <- vennObj
remove(vennObj)
gonodaXde <- xDe
remove(xDe)
remove(e)
remove(genes)
remove(names)
remove(rangeLfc)
remove(t)
remove(display_venn())
consexpression2(numberReplics = 7, groupName = c("brain","uhr"), tableCountPath = "OneDrive/ProjetoDoutorado/PPGBIOINFO/Projeto/results_gencode/TopHat_results/UHR_vs_Brain_gencode_TopHat_table_count.txt", sepCharacter = "\t")
read.csv("OneDrive/ProjetoDoutorado/PPGBIOINFO/Projeto/results_gencode/TopHat_results/UHR_vs_Brain_gencode_TopHat_table_count.txt", sep = "\t", row.names = 1, header = TRUE, stringsAsFactors = FALSE)
read.csv("/Users/julianacostasilva/Library/CloudStorage/OneDrive-Pessoal/ProjetoDoutorado/PPGBIOINFO/Projeto/results_gencode/TopHat_results/UHR_vs_Brain_gencode_TopHat_table_count.txt", sep = "\t", row.names = 1, header = TRUE, stringsAsFactors = FALSE)
read.csv("/Users/julianacostasilva/Library/CloudStorage/OneDrive-Pessoal/ProjetoDoutorado/PPGBIOINFO/Projeto/results_gencode/TopHat_results/UHR_vs_Brain_gencode_TopHat_table_count.txt", sep = ",", row.names = 1, header = TRUE, stringsAsFactors = FALSE)
consexpression2(numberReplics = 7, groupName = c("Brain","UHR"), tableCountPath = "/Users/julianacostasilva/Library/CloudStorage/OneDrive-Pessoal/ProjetoDoutorado/PPGBIOINFO/Projeto/results_gencode/TopHat_results/UHR_vs_Brain_gencode_TopHat_table_count.txt", sepCharacter = ",")
devtools::load_all()
uhrBrainResults <- consexpression2(numberReplics = 7, groupName = c("Brain","UHR"), tableCountPath = "/Users/julianacostasilva/Library/CloudStorage/OneDrive-Pessoal/ProjetoDoutorado/PPGBIOINFO/Projeto/results_gencode/TopHat_results/UHR_vs_Brain_gencode_TopHat_table_count.txt", sepCharacter = ",")
devtools::load_all()
uhrBrainResults <- consexpression2(numberReplics = 7, groupName = c("Brain","UHR"), tableCountPath = "/Users/julianacostasilva/Library/CloudStorage/OneDrive-Pessoal/ProjetoDoutorado/PPGBIOINFO/Projeto/results_gencode/TopHat_results/UHR_vs_Brain_gencode_TopHat_table_count.txt", sepCharacter = ",")
numberReplics = 7
groupName = c("Brain","UHR")
tableCountPath = "/Users/julianacostasilva/Library/CloudStorage/OneDrive-Pessoal/ProjetoDoutorado/PPGBIOINFO/Projeto/results_gencode/TopHat_results/UHR_vs_Brain_gencode_TopHat_table_count.txt"
sepCharacter = ","
experimentName="genericExperiment"
outDirPath="/Users/julianacostasilva/Library/CloudStorage/OneDrive-Pessoal/ProjetoDoutorado/consexpression_2/results/"
methodNorm = "TMM"
methodAdjPvalue = "BH"
numberTopTable = 1000000
printResults=FALSE
countMatrix <- readCountFile(tableCountPath,sepCharacter)
designExperiment <- rep(groupName, each = numberReplics)
designExperiment
paste("A", 1:6, sep = "")
designExperiment <- paste(groupName, 1:numberReplics, sep="")
designExperiment
designExperiment <- paste(groupName[1], 1:numberReplics, sep="")
designExperiment
View(countMatrix)
groupName = c("UHR","Brain")
for(item in groupName){
designExperiment <- paste(item, 1:numberReplics, sep="")
}
designExperiment
designExperiment <- NULL
for(item in groupName){
newData <- paste(item, 1:numberReplics, sep="")
designExperiment <- paste(designExperiment, newData)
}
designExperiment
designExperiment <- NULL
for(item in groupName){
newData <- paste(item, 1:numberReplics, sep="")
designExperiment <- rbind(designExperiment, newData)
}
designExperiment
designExperiment <- c(designExperiment, newData)
designExperiment
designExperiment <- NULL
for(item in groupName){
newData <- paste(item, 1:numberReplics, sep="")
designExperiment <- c(designExperiment, newData)
}
designExperiment
result <- NULL
result$bayseq<-runBaySeq(countMatrix,
designExperiment)
result$bayseq
View(result$bayseq)
View(countMatrix)
designExperiment
View(gonodaXde)
groups <- list(NDE = rep("experiment", length(designExperiment)),
DE = rep(groupName, each=numberReplics))
groups
devtools::load_all()
devtools::load_all()
result <- NULL
result$bayseq<-runBaySeq(countMatrix,groupName, numberReplics)
result <- NULL
result$bayseq<-runBaySeq(countMatrix,groupName, numberReplics)
result$bayseq
View(result$bayseq)
result <- baySeq::topCounts(CD,
group = "DE")
View(countMatrix)
if(require("parallel")) cl <- parallel::makeCluster(clusters) else cl <- NULL
clusters=2
equalDispersion = TRUE
priorProbabilities=c(0.5, 0.5)
reestimationType = "BIC"
result$edger<-runEdger(countMatrix,
numberReplics,
designExperiment)
designExperiment
group <- c(desingExperiment)
group <- c(desingExperiment)
designExperiment
group <- c(designExperiment)
group
y.dge <- edgeR::DGEList(counts = countMatrix, group = group)
y.dge <- edgeR::calcNormFactors(y.dge)
y.dge <- edgeR::estimateDisp(y.dge)
CD <- new("countData",
data = countMatrix,
replicates = rep(groupName, each=numberReplics),
groups = groups)
baySeq::libsizes(CD) <- baySeq::getLibsizes(CD)
CD <- baySeq::getPriors.NB(CD,
samplesize = sampleSize,
estimation = estimationMethod,
cl = cl,
equalDispersions = equalDispersion)
estimationMethod = "QL"
CD <- baySeq::getPriors.NB(CD,
samplesize = sampleSize,
estimation = estimationMethod,
cl = cl,
equalDispersions = equalDispersion)
sampleSize = 1000
CD <- baySeq::getPriors.NB(CD,
samplesize = sampleSize,
estimation = estimationMethod,
cl = cl,
equalDispersions = equalDispersion)
if(require("parallel")) cl <- parallel::makeCluster(clusters) else cl <- NULL
CD <- baySeq::getPriors.NB(CD,
samplesize = sampleSize,
estimation = estimationMethod,
cl = cl,
equalDispersions = equalDispersion)
CD <- baySeq::getLikelihoods(CD,
prs=priorProbabilities,
pET=reestimationType,
cl=cl)
result$bayseq <- baySeq::topCounts(CD,
group = topCountGroup,
number = numberTopCount)
result$bayseq <- baySeq::topCounts(CD,
group = "DE",
number = numberTopCount)
result$bayseq <- baySeq::topCounts(CD,
group = "DE",
number = 10000)
setwd("~/GitHub/consexpression2/")
# Command to load current version of package
devtools::load_all()
library(devtools)
# Command to load current version of package
devtools::load_all()
# variables
numberReplics =  7
groupName = c("UHR", "Brain")
tableCountPath = "/Users/julianacostasilva/Library/CloudStorage/OneDrive-Pessoal/ProjetoDoutorado/consexpression_R/Bulk_Datasets/UHR_vs_Brain_gencode_TopHat_table_count.txt"
sepCharacter=","
experimentName="UHR_vs_Brain"
outDirPath="/Users/julianacostasilva/Library/CloudStorage/OneDrive-Pessoal/ProjetoDoutorado/consexpression_R/resultsBulk/"
countMatrix <- readCountFile(tableCountPath,sepCharacter)
designExperiment <- NULL
for(item in groupName){
newData <- paste(item, 1:numberReplics, sep="")
designExperiment <- c(designExperiment, newData)
}
result <- NULL
result$bayseq<-runBaySeq(countMatrix,
groupName,
numberReplics)
result$edger<-runEdger(countMatrix,
numberReplics,
designExperiment)
designExperiment <- rep(groupName, each = numberReplics)
result$edger<-runEdger(countMatrix,
numberReplics,
designExperiment)
result$bayseq
result$limma<-runLimma(countMatrix,
numberReplics,
designExperiment)
result$edger
result$limma
result$noiseq<-runNoiSeq(countMatrix,
designExperiment)
result$noiseq
result$ebseq <- runEbseq(countMatrix,
designExperiment)
result$ebseq
# DESeq2 kallisto
designExperimentDeseq2 <- colnames(countMatrix)
if(typeof(countMatrix) == "double"){
result$deseq2 <- runDeseq2(countMatrix,
groupName,
designExperimentDeseq2,
kallistoReport,
kallistoDir,
kallistoSubDir,
kallistoOut)
}else{
result$deseq2 <- runDeseq2(countMatrix,
groupName,
designExperimentDeseq2)
# SAMSeq only count data
print("**** SAMSeq run CANCELLED, enabled for count data only.")
result$samseq<-runSamSeq(countMatrix,
numberReplics,
designExperiment)
}
designExperimentDeseq2 <- colnames(countMatrix)
result$deseq2 <- runDeseq2(countMatrix,
groupName,
designExperimentDeseq2)
colnames(countMatrix)
row.names(countMatrix)
dds <-DESeq2::DESeqDataSetFromMatrix(countData = countMatrix,
colData = colnames(countMatrix),
design= ~ designExperiment)
DESeq2::DESeqDataSet(countMatrix,designExperimentDeseq2)
dds <-DESeq2::DESeqDataSetFromMatrix(countMatrix,
colnames(countMatrix),
designExperimentDeseq2)
remove(ebseqDf)
remove(teste)
remove(vennObj)
remove(variable)
remove(designExperimentDeseq2)
remove(e)
remove(item)
remove(names)
remove(t)
remove(newData)
head(countMatrix)
row.names(countMatrix)
plotMA.CD(CD, samplesA = "UHR", samplesB = "Brain",
+ col = c(rep("red", 100), rep("black", 900)))
plotMA.CD(CD, samplesA = "UHR", samplesB = "Brain",
+ col = c(rep("red", 100), rep("black", 900)))
# problema row.names NA.1, NA.2, etc...
baySeq::plotMA.CD(CD, "UHR", "Brain", "TRUE", NULL, "UHR", "Brain")
CD <- new("countData", data = countMatrix,
replicates = c("UHR", "UHR", "UHR","UHR","UHR","UHR","UHR",
"Brain", "Brain", "Brain","Brain","Brain","Brain","Brain"),
groups = list(NDE = c(1,1,1,1,1,1,1,1,1,1,1,1,1,1),
DE = c(1,1,1,1,1,1,1,2,2,2,2,2,2,2))
)
if(require("parallel")) cl <- makeCluster(8) else cl <- NULL
libsizes(CD) <- getLibsizes(CD)
if(require("parallel")) cl <- makeCluster(8) else cl <- NULL
libsizes(CD) <- baySeq::getLibsizes(CD)
View(CD)
# problema row.names NA.1, NA.2, etc...
baySeq::plotMA.CD(CD, "UHR", "Brain", "TRUE", NULL, "UHR", "Brain")
normCD <- baySeq::getPriors.NB(CD, cl = cl)
normCD
normCD <- baySeq::getLikelihoods(normCD, prs = c(0.5, 0.5), cl = cl,)
normCD
result$bayseq2 <- baySeq::topCounts(normCD, "DE")
result$bayseq2
result$bayseq2 <- topCounts(CD, group = "DE", number = 65000, normaliseData = TRUE)
result$bayseq2 <- baySeq::topCounts(CD, group = "DE", number = 65000, normaliseData = TRUE)
result$bayseq2 <- baySeq::topCounts(normCD, group = "DE", number = 65000, normaliseData = TRUE)
result$bayseq2
write.table(topCounts(CD, group = "DE", number = 65000, normaliseData = TRUE), "bayseq_UHR_Brain.csv", sep="\t", quote = FALSE)
write.table(baySeq::topCounts(CD, group = "DE", number = 65000, normaliseData = TRUE), "bayseq_UHR_Brain.csv", sep="\t", quote = FALSE)
write.table(baySeq::topCounts(normCD, group = "DE", number = 65000, normaliseData = TRUE), "bayseq_UHR_Brain.csv", sep="\t", quote = FALSE)
View(countMatrix)
CD <- new("countData", data = countMatrix,
replicates = c("UHR", "UHR", "UHR","UHR","UHR","UHR","UHR",
"Brain", "Brain", "Brain","Brain","Brain","Brain","Brain"),
groups = list(NDE = c(1,1,1,1,1,1,1,1,1,1,1,1,1,1),
DE = c(1,1,1,1,1,1,1,2,2,2,2,2,2,2))
)
if(require("parallel")) cl <- makeCluster(8) else cl <- NULL
libsizes(CD) <- baySeq::getLibsizes(CD)
baySeq::libsizes(CD) <- baySeq::getLibsizes(CD)
CD <- baySeq::getPriors.NB(CD, cl = cl)
CD <- baySeq::getLikelihoods(CD, prs = c(0.5, 0.5), cl = cl,)
result$bayseq2 <- baySeq::topCounts(CD, group = "DE", number = 65000, normaliseData = TRUE)
result$bayseq2
write.table(baySeq::topCounts(CD, group = "DE", number = 65000, normaliseData = TRUE), "bayseq_UHR_Brain.csv", sep="\t", quote = FALSE)
CD
View(countMatrix)
library(devtools)
devtools::load_all()
library(shiny); runApp('R/runConsexpression2.R')
runApp('R/runConsexpression2.R')
runApp('R/runConsexpression2.R')
runApp('R/runConsexpression2.R')
runApp()
runApp("R/")
runApp("R/")
runApp("R/")
devtools::load_all()
runApp()
runApp()
devtools::load_all()
runApp()
devtools::load_all()
devtools::check()
runApp()
runApp(runConsexpression2.R)
runApp("runConsexpression2.R")
runConsexpression2()
runConsexpression2()
devtools::load_all()
runConsexpression2()
devtools::load_all()
runConsexpression2()
devtools::load_all()
runConsexpression2()
runConsexpression2()
library(devtools)
devtools::load_all()
runConsexpression2()
devtools::check()
install.packages("shinythemes")
devtools::check()
devtools::check()
devtools::load_all()
runConsexpression2()
devtools::load_all()
runConsexpression2()
devtools::load_all()
runConsexpression2()
devtools::load_all()
runConsexpression2()
devtools::check()
devtools::load_all()
runConsexpression2()
devtools::load_all()
runConsexpression2()
devtools::load_all()
runConsexpression2()
devtools::load_all()
runConsexpression2()
devtools::load_all()
runConsexpression2()
runConsexpression2()
devtools::load_all()
runConsexpression2()
remove(CD)
remove(cl)
remove(countMatrix)
remove(deList)
remove(deseq2Df)
remove(resOrdered)
remove(normCD)
remove(deTool)
remove(designExperiment)
gc()
devtools::load_all()
runConsexpression2()
runConsexpression2()
gc()
gc()
devtools::check()
devtools::load_all()
runConsexpression2()
