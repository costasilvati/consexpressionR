sepCharacter = ",",
pathOutput = outDir,
toolName = "deByTool")
colunaPCR = 7
valoresPCR = c(1)
gse95077_metrics <- metricsCalc(deToolList = gse95077_expDef_result,
goldList = gse95077_qPCR,
goldColValue = colunaPCR,
goldPositiveValue = valoresPCR,
experimentName = "gse95077",
pathOut = "/Volumes/SD128GB/tese/datasets/gse95077/results_1612024/",
writeData = TRUE )
View(gse95077_metrics)
View(gse95077_expDef_result)
View(gse95077_deByTool)
View(gse95077_qPCR)
gse95077_qPCR$gene <- trimws(gse95077_qPCR$ensembl_gene_id)
colunaPCR = 7
valoresPCR = c(1)
gse95077_metrics <- metricsCalc(deToolList = gse95077_expDef_result,
goldList = gse95077_qPCR,
goldColValue = colunaPCR,
goldPositiveValue = valoresPCR,
experimentName = "gse95077",
pathOut = outDir,
writeData = TRUE )
View(gse95077_metrics)
View(gse95077_qPCR)
## gse95077_qPCR: importar arquivo "/Volumes/SD128GB/tese/datasets/gse95077/gse95077_GeneIDs_ENSG.csv"
gse95077_qPCR <- read.csv("/Volumes/SD128GB/tese/datasets/gse95077/gse95077_GeneIDs_ENSG.csv", sep = ";")
colnames(gse95077_qPCR)[which(colnames(gse95077_qPCR) == "EnsemblID")] <- "ensembl_gene_id"
gse95077_qPCR_unique <- unique(gse95077_qPCR$ensembl_gene_id)
library(biomaRt)
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")
merged_data2 <- merge(merged_data, gse95077_qPCR, by = "ensembl_gene_id")
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")
sessionInfo()
remove(itens, newList, deCons, deTool, frame, gg)
library(biomaRt)
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("biomaRt")
library(biomaRt)
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")
?useEnsembl
?useMart
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl", host = "useast.ensembl.org")
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl", host = "https://useast.ensembl.org")
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")
listEnsembl
listEnsembl()
library(biomaRt)
listEnsembl()
listEnsemblGenomes()
gse95077_qPCR_DE <- read.csv("/Volumes/SD128GB/tese/datasets/gse95077/gse95077_qRT-PCR.csv")
View(gse95077_qPCR_DE)
# Filtrar os dados que possuem valor "Selected" na coluna qRT.PCR
gse95077_qPCR <- gse95077_qPCR_DE[merged_data2$SelectedforqRT.PCR == "Selected", ]
# Filtrar os dados que possuem valor "Selected" na coluna qRT.PCR
gse95077_qPCR <- gse95077_qPCR_DE[gse95077_qPCR_DE$SelectedforqRT.PCR == "Selected", ]
# Filtrar os dados que possuem valor "Selected" na coluna qRT.PCR
gse95077_qPCR <- gse95077_qPCR_DE[gse95077_qPCR_DE$qRT.PCR == "Selected", ]
rownames(filtered_data) <- filtered_data$ensembl_gene_id
row.names(gse95077_qPCR) <- gse95077_qPCR_DE$gene
row.names(gse95077_qPCR) <- gse95077_qPCR$gene
colunaPCR = 1
valoresPCR = c(1,0)
gse95077_metrics <- metricsCalc(deToolList = gse95077_expDef_result,
goldList = gse95077_qPCR,
goldColValue = colunaPCR,
goldPositiveValue = valoresPCR,
experimentName = "gse95077",
pathOut = outDir,
writeData = TRUE )
View(gse95077_metrics)
colunaPCR = 4
valoresPCR = c(1,0)
gse95077_metrics <- metricsCalc(deToolList = gse95077_expDef_result,
goldList = gse95077_qPCR,
goldColValue = colunaPCR,
goldPositiveValue = valoresPCR,
experimentName = "gse95077",
pathOut = outDir,
writeData = TRUE )
View(gse95077_expDef_result)
gse95077_consThresold <- list()
i <- 0
for(i in 1:length(gse95077_expDef_result)){
tmp <- consensusList(gse95077_expDef_result ,
gse95077_deByTool,
threshold = i)
#cat(i)
gse95077_consThresold[[i]] <- tmp$edger
}
View(gse95077_consThresold)
names(gse95077_consThresold) <- as.character(seq_along(gse95077_expDef_result))
remove(tmp, i)
colunaPCR = 4
valoresPCR = c(1)
gse95077_metrics <- metricsCalc(deToolList = gse95077_expDef_result,
goldList = gse95077_qPCR,
goldColValue = colunaPCR,
goldPositiveValue = valoresPCR,
experimentName = "gse95077",
pathOut = outDir,
writeData = TRUE )
gse95077_consThresold <- list()
i <- 0
for(i in 1:length(gse95077_expDef_result)){
tmp <- consensusList(gse95077_expDef_result ,
gse95077_deByTool,
threshold = i)
#cat(i)
gse95077_consThresold[[i]] <- tmp$edger
}
names(gse95077_consThresold) <- as.character(seq_along(gse95077_expDef_result))
remove(tmp, i)
gse95077_consesno_metrics <- metricsCalc(deToolList = gse95077_consThresold,
goldList = gse95077_qPCR,
goldColGeneName = 1,
goldColValue = 4,
goldPositiveValue = c(1),
experimentName = "gse95077",
pathOut = "/Volumes/SD128GB/tese/datasets/gse95077/results_082024_JJ_BM_/consenso_v2.1_",
writeData = TRUE )
View(gse95077_consesno_metrics)
View(gse95077_expDef_result)
View(sra010153_expDef_result)
View(gse95077_deByTool)
gse95077_consThresold <- list()
i <- 0
for(i in 1:length(gse95077_expDef_result)){
tmp <- consensusList(gse95077_expDef_result ,
gse95077_deByTool,
threshold = i)
#cat(i)
gse95077_consThresold[[i]] <- tmp$ebseq
}
View(gse95077_consThresold)
names(gse95077_consThresold) <- as.character(seq_along(gse95077_expDef_result))
remove(tmp, i)
gse95077_consesno_metrics <- metricsCalc(deToolList = gse95077_consThresold,
goldList = gse95077_qPCR,
goldColGeneName = 1,
goldColValue = 4,
goldPositiveValue = c(1),
experimentName = "gse95077",
pathOut = outDir,
writeData = TRUE )
View(gse95077_metrics)
dados <- gse95077_consesno_metrics
nameData = "Dataset B"
dados <- na.omit(dados)
cores_gradiente <- colorRampPalette(c("black", "green","blue", "yellow", "red"))(nrow(dados))
dados <- na.omit(dados)
cores_gradiente <- colorRampPalette(c("black", "green","blue", "yellow", "red"))(nrow(dados))
plot(dados$Recall,
dados$Precision,
type = "b",
col = cores_gradiente,
pch = 19,
main = nameData,
xlab = "Recall",
ylab = "Precision",
xlim=c(0,1.0),
ylim=c(0,1.0),
xaxt="n",
yaxt="n")
text(dados$Recall,
dados$Precision,
labels = row.names(dados),
pos = 2,
cex = 0.8,
col = "black")
# axis(1, at = seq(0, max(dados$TP)+10, by = 10))
# axis(2, at = seq(0, max(dados$FP)+10, by = 10))
axis(1, at = seq(0, 1.5, by = 0.1))
axis(2, at = seq(0,1.5, by = 0.1))
View(sra010153_metrics)
View(sra010153_consesno_metrics)
library(devtools)
library(cqn)
load_all()
writeResults(data = gse95077_metrics, toolName = "gse_95077_metrics", pathOutput = outDir)
#crie a função abaixo
metricsCalc <- function(deToolList,
goldList,
goldColGeneName = 1,
goldColValue = 2,
goldPositiveValue = c(1,-1),
goldNegativeValue = 0,
experimentName = "experiment",
pathOut = ".",
writeData = FALSE
){
cols = c("TP","FP", "TN", "FN", "Recall","Specificity","Precision", "ACC", "F1-Score")
toolNames <- names(deToolList)
metrics <- data.frame(matrix(0, ncol = length(cols),
nrow = length(toolNames)))
colnames(metrics) <- cols
row.names(metrics) <- toolNames
for (i in 1:length(toolNames)) {
cat(i,"\n")
condicao_TP <- (goldList[,goldColValue] %in% goldPositiveValue) & (goldList[,goldColGeneName] %in% row.names(deToolList[[i]]))
tp <- sum(condicao_TP)
condicao_FP <- (goldList[,goldColValue] == goldNegativeValue) & (goldList[,goldColGeneName] %in% row.names(deToolList[[i]]))
fp <- sum(condicao_FP)
condicao_TN <- (goldList[,goldColValue] == goldNegativeValue) & (!(goldList[,goldColGeneName] %in% row.names(deToolList[[i]])))
tn <- sum(condicao_TN)
condicao_FN <- (goldList[,goldColValue] %in% goldPositiveValue) & (!(goldList[,goldColGeneName] %in% row.names(deToolList[[i]])))
fn <- sum(condicao_FN)
#Recall, SPC (Specificity), Precicion, ACC (Accuracy) and F1 measure
recall <- tp/(tp+fn)
spc <- tn/(tn+fp)
precision <- tp/(tp+fp)
acc <- (tp + tn)/(tp+fp+tn+fn)
f1score <- 2*(recall * precision)/(recall+precision)
metrics[i,] <- c(tp, fp, tn, fn, recall, spc, precision, acc, f1score)
}
if(writeData){
writeResults(data = metrics,
toolName = "_metrics_",
pathOutput = pathOut)
}
return(metrics)
}
max.col(dados$TP)
max(dados$TP)
plot(dados$TP,
dados$FP,
type = "b",
col = cores_gradiente,
pch = 19,
main = nameData,
xlab = "TP",
ylab = "FP",
#xlim=c(0,1.0),
#ylim=c(0,1.0),
xaxt="n",
yaxt="n")
text(dados$Recall,
dados$Precision,
labels = row.names(dados),
pos = 2,
cex = 0.8,
col = "black")
# axis(1, at = seq(0, max(dados$TP)+10, by = 10))
# axis(2, at = seq(0, max(dados$FP)+10, by = 10))
axis(1, at = seq(0, max(dados$TP), by = 0.1))
axis(2, at = seq(0,max(dados$FP), by = 0.1))
plot(dados$TP,
dados$FP,
type = "b",
col = cores_gradiente,
pch = 19,
main = nameData,
xlab = "TP",
ylab = "FP",
#xlim=c(0,1.0),
#ylim=c(0,1.0),
xaxt="n",
yaxt="n")
text(dados$Recall,
dados$Precision,
labels = row.names(dados),
pos = 2,
cex = 0.8,
col = "black")
# axis(1, at = seq(0, max(dados$TP)+10, by = 10))
# axis(2, at = seq(0, max(dados$FP)+10, by = 10))
axis(1, at = seq(0, max(dados$TP), by = 5))
axis(2, at = seq(0,max(dados$FP), by = 5))
text(dados$Recall,
dados$Precision,
labels = row.names(dados),
pos = 2,
cex = 0.8,
col = "black")
text(dados$TP,
dados$FP,
labels = row.names(dados),
pos = 2,
cex = 0.8,
col = "black")
text(dados$TP,
dados$FP,
labels = row.names(dados),
pos = 1,
cex = 0.8,
col = "black")
text(dados$TP,
dados$FP,
labels = row.names(dados),
pos = 2,
cex = 0.8,
col = "black")
text(dados$TP,
dados$FP,
labels = row.names(dados),
pos = 2.5,
cex = 0.8,
col = "black")
text(dados$TP,
dados$FP,
labels = row.names(dados),
pos = 3,
cex = 0.8,
col = "black")
plot(dados$TP,
dados$FP,
type = "b",
col = cores_gradiente,
pch = 19,
main = nameData,
xlab = "TP",
ylab = "FP",
#xlim=c(0,1.0),
#ylim=c(0,1.0),
xaxt="n",
yaxt="n")
text(dados$TP,
dados$FP,
labels = row.names(dados),
pos = 3,
cex = 0.8,
col = "black")
axis(1, at = seq(0, max(dados$TP), by = 5))
axis(2, at = seq(0,max(dados$FP), by = 5))
plot(dados$TP,
dados$FP,
type = "b",
col = cores_gradiente,
pch = 19,
main = nameData,
xlab = "TP",
ylab = "FP",
#xlim=c(0,1.0),
#ylim=c(0,1.0),
xaxt="n",
yaxt="n")
text(dados$TP,
dados$FP,
labels = row.names(dados),
pos = 3,
cex = 0.8,
col = "black")
# axis(1, at = seq(0, max(dados$TP)+10, by = 10))
# axis(2, at = seq(0, max(dados$FP)+10, by = 10))
axis(1, at = seq(0, max(dados$TP), by = 1))
axis(2, at = seq(0,max(dados$FP), by = 1))
text(dados$TP,
dados$FP,
labels = row.names(dados),
pos = 1,
cex = 0.8,
col = "black")
text(dados$TP,
dados$FP,
labels = row.names(dados),
pos = 1.5,
cex = 0.8,
col = "black")
text(dados$TP,
dados$FP,
labels = row.names(dados),
pos = 0,
cex = 0.8,
col = "black")
text(dados$TP,
dados$FP,
labels = row.names(dados),
pos = 0.5,
cex = 0.8,
col = "black")
text(dados$TP,
dados$FP,
labels = row.names(dados),
pos = 4,
cex = 0.8,
col = "black")
text(dados$TP,
dados$FP,
labels = row.names(dados),
pos = 3,
cex = 0.8,
col = "black")
text(dados$TP,
dados$FP,
labels = row.names(dados),
pos = 1,
cex = 0.8,
col = "black")
text(dados$TP,
dados$FP,
labels = row.names(dados),
pos = 2,
cex = 0.8,
col = "black")
plot(dados$TP,
dados$FP,
type = "b",
col = cores_gradiente,
pch = 19,
main = nameData,
xlab = "TP",
ylab = "FP",
#xlim=c(0,1.0),
#ylim=c(0,1.0),
xaxt="n",
yaxt="n")
text(dados$TP,
dados$FP,
labels = row.names(dados),
pos = 2,
cex = 0.8,
col = "black")
axis(1, at = seq(0, max(dados$TP), by = 1))
axis(2, at = seq(0,max(dados$FP), by = 1))
dados <- sra010153_consesno_metrics
nameData = "Dataset A"
plot(dados$TP,
dados$FP,
type = "b",
col = cores_gradiente,
pch = 19,
main = nameData,
xlab = "TP",
ylab = "FP",
#xlim=c(0,1.0),
#ylim=c(0,1.0),
xaxt="n",
yaxt="n")
text(dados$TP,
dados$FP,
labels = row.names(dados),
pos = 2,
cex = 0.8,
col = "black")
axis(1, at = seq(0, max(dados$TP), by = 1))
axis(2, at = seq(0,max(dados$FP), by = 1))
plot(dados$TP,
dados$FP,
type = "b",
col = cores_gradiente,
pch = 19,
main = nameData,
xlab = "TP",
ylab = "FP",
#xlim=c(0,1.0),
#ylim=c(0,1.0),
xaxt="n",
yaxt="n")
text(dados$TP,
dados$FP,
labels = row.names(dados),
pos = 2,
cex = 0.8,
col = "black")
# axis(1, at = seq(0, max(dados$TP)+10, by = 10))
# axis(2, at = seq(0, max(dados$FP)+10, by = 10))
axis(1, at = seq(0, max(dados$TP), by = 20))
axis(2, at = seq(0,max(dados$FP), by = 20))
View(sra010153_metrics)
outDir
writeResults(data = sra010153_metrics, toolName = "sra010153_metrics_", pathOutput = "/Volumes/SD128GB/tese/datasets/sra010153/" )
writeResults(data = gse95077_consesno_metrics, toolName = "_gse_95077_consenso_metrics_", pathOutput = outDir)
save.image("/Volumes/SD128GB/tese/datasets/consexpressionR.RData")
View(sra010153_metrics)
library(devtools)
check()
check()
usethis::use_package("knitr", "Suggests")
usethis::use_package("knitr", "Suggests")
devtools::document()
check()
devtools::document()
check()
devtools::document()
check()
usethis::use_package("devtools", "Suggests")
library(devtools)
devtools::document()
library(devtools)
devtools::document()
check()
devtools::document()
check()
library(cqn)
check()
?rq()
library(quantreg)
check()
cons_result <- runExpression(numberReplics = 3, groupName = c("BM", "JJ"),
#'                               rDataFrameCount = gse95077,
#'                               sepCharacter = ",",
#'                               experimentName = "test_cons",
#'                               outDirPath = "." )
cons_result <- runExpression(numberReplics = 3, groupName = c("BM", "JJ"), rDataFrameCount = gse95077,sepCharacter = ",", experimentName = "test_cons", outDirPath = "." )
)
cons_result <- runExpression(numberReplics = 3, groupName = c("BM", "JJ"), rDataFrameCount = gse95077,sepCharacter = ",", experimentName = "test_cons", outDirPath = "." )
expDef_result <- expressionDefinition(resultTool = cons_result)
deByTool <- listDeByTool(cons_result, expDef_result)
deByTool <- listDeByTool(consexpressionList = cons_result, geneNames = row.names(cons_result), deList = expDef_result)
m <- as.matrix(gse95077)
deByTool <- listDeByTool(consexpressionList = cons_result, geneNames = row.names(m), deList = expDef_result)
devtools::document()
check()
