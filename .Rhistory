runConsexpressionTestes()
remotes::install_github("thomasp85/shinyFiles")
# library(shiny)
# library(shinyFiles)
# library(fs)
runConsexpressionTestes <- function(){
ui <- shiny::fluidPage(
h1("consexpression", span("R", style = "font-weight: 300"),
style = "color: #fff; text-align: center;
background-color:#27296d;
padding: 5%;
margin-bottom: 2%;"),
shiny::fluidRow(
shiny::h2("Configure Experiment", style = "text-align: center;"),
shiny::fluidRow(
shiny::column(width = 1,
),
shiny::column(width = 10,
shiny::wellPanel(shiny::h3("Experiment Design", style="color: #5e63b6;"),
shiny::fluidRow(
shiny::column(width = 6,
shiny::textInput(inputId = "experimentNameInp",
label="Experiment Name",
value="genericExperiment",
placeholder = "genericExperiment"),
),
shiny::column(width = 6,
shiny::numericInput(inputId = "numberReplicsInp",
label="Number of Replics",
value= 1,
min = 1,),
),
shiny::p(shiny::helpText(
"Note: This tool expect the same number of replics in each group of treatment."
)),
),
shiny::textInput(inputId ="groupNameInp",
label="Treatment Names",
placeholder ="Treat1, Treat2"),
shiny::helpText("Note: Comma separeted list by sample treatment names."),
shiny::h3("Table count file", style="color: #5e63b6;"),
# Input: Selector for choosing dataset ----
shiny::fluidRow(
shiny::column(width = 6,
shiny::selectInput(inputId = "sepCharcterInp",
label = "Choose a separator:",
choices = c("Comma-separated"=",","TAB" = "\t")),
),
shiny::column(width = 6,
shiny::fileInput(inputId = "tableCountInp",
label = "Select a table count file",
multiple = FALSE,
accept = c("text/csv/tsv",
"text/comma-separated-values,text/plain",".csv")),
helpText("Note: while the data view will show only the specified", "number of replics, the summary will still be based","on the full dataset."),
)
),
shiny::div( style= "text-align: center;",
shiny::actionButton(inputId = "go",
label = "Load count dataset",
width = '51%',
class= "btn-primary" ),
)
),
),
column(width = 1)
),
shiny::fluidRow(
shiny::column(width = 12,
shiny::h2("Details of data set load", style = "text-align: center;"),
shiny::wellPanel(
DT::dataTableOutput("sample")
)
),
),
shiny::fluidRow(
shiny::column(width = 5,
shiny::h2("Expression analysis parameters", style="text-aligner:center;"),
shiny::p("The consensus methodology of this tool was tested with the parameters shown below."),
shiny::wellPanel(
shiny::h3("DESEq2", style="color: #5e63b6;"),
shiny::selectInput(inputId = "fitTypeInp",
label = "fitType",
choices = c("parametric"="parametric", "local"="local", "mean"="mean", "glmGamPoi"="glmGamPoi"),
selected = "local",
width = NULL
), #selectInput
shinyFiles::shinyDirButton("kallistoDirRuns", "Select kallisto root output", title = "Select kallisto output folder"),
helpText("Note: select the folder in default output by kallisto"),
shiny::verbatimTextOutput("selectedFolder")
# shiny::fileInput("kallistoDirRuns", "Directory that contais kallisto runs.",)
# pathDirRuns = ".",
# pathReportFile = "report_txi.txt",
# subDirRuns = "dir_runs",
# fileKallisto = "abundance.tsv"
# shiny::helpText("Use the default (selected) settings of the expression analysis methods, or configure manually")
) #wellPanel
) #column(width = 5,
), # fluidRow
) # fluidRow
) #fluidPage
# Define server logic required to draw a histogram
server <- function(input, output) {
options(shiny.maxRequestSize=30*1024^2)
datasetCount <- eventReactive(input$go, {
inFile <- input$tableCountInp
readCountFile(inFile$datapath, input$sepCharcterInp)
})
output$sample <- DT::renderDataTable({
DT::datatable(datasetCount())
})
# Cria o objeto de diretório
volumes <- getVolumes()
shinyFiles::shinyDirChoose(input, "kallistoDirRuns", roots = volumes, filetypes = NULL)
# Atualiza a saída de texto com a pasta selecionada
output$selectedFolder <- renderText({
parseDirPath(volumes, input$dir)
})
}
# Run the application
shiny::shinyApp(ui = ui, server = server)
}
remove(runConsexpressionTestes())
remove(runConsexpressionTestes
)
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
View(df)
library(devtools)
load_all()
runConsexpressionTestes()
library(shiny)
library(shinyFiles)
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
?edgeR::exactTest()
View(df)
runEdger(df, 3, c("BB", "BB", "BB", "JJ", "JJ", "JJ"))
?edgeR::calcNormFactors
load_all()
load_all()
runEdger(df, 3, c("BB", "BB", "BB", "JJ", "JJ", "JJ"))
load_all()
runEdger(df, 3, c("BB", "BB", "BB", "JJ", "JJ", "JJ"))
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
library(devtools)
library(shiny)
library(shinyFiles)
library(fs)
load_all()
runConsexpressionTestes()
?numericInput
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
load_all()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
?stats::p.adjust
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
usethis::use_import_from("shinyWidgets", "toolTipText")
load_all()
usethis::use_import_from("shinyWidgets", "toolTipText")
runConsexpressionTestes()
usethis::use_import_from("shinyWidgets", "tooltipText")
load_all()
runConsexpressionTestes()
library(shinyWidgets)
load_all()
runConsexpressionTestes()
usethis::use_import_from("tipify", "tipfy")
install.packages("tipify")
install.packages("tipify", force=TRUE)
shinyWidgetsGallery()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
load_all()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
library(devtools)
load_all()
library(shiny)
library(shinyFiles)
library(fs)
runConsexpressionTestes()
library(NOISeq)
?noiseq
load_all()
runConsexpressionTestes()
View(GSE95077_consexpression2)
View(GSE95077_consexpression2[["noiseq"]])
NOISeq::degenes(GSE95077_consexpression2$noiseq, q= 0.8, M=NULL)
myfactors = data.frame(Tissue=c(designExperiment))
myfactors = data.frame(Tissue=c(designExperimentModel))
mydata <- NOISeq::readData(data=countMatrix, factors=myfactors)
myfactors = data.frame(Tissue=c(designExperimentModel))
mydata <- NOISeq::readData(data=GSE95077_filtered_BMJJ, factors=myfactors)
mynoiseq = NOISeq::noiseq(mydata,
norm = "rpkm",
k= 0.5,
factor="Tissue",
lc= 0,
replicates="technical")
noiseqRsult <- NOISeq::degenes(mynoiseq, q= 0.8, M=NULL)
View(GSE95077_deList)
View(GSE95077_deList[["noiseq"]])
View(noiseqRsult)
View(GSE95077_deList[["noiseq"]])
load_all()
runConsexpressionTestes()
library(samr)
?SAMseq
runSAM()
runSAM()
library(devt)
library(devtools)
load_all()
runConsexpressionTestes()
library(shiny)
library(shinyjs)
library(shinyFiles)
library(fs)
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
library(KnowSeq)
?DEGsExtraction
toolResult$knowSeq <- runKnowSeq(countMatrix = df,
groupName = groupNameModel,
numberReplic = numberReplicsModel)
toolResult$knowSeq <- runKnowSeq(countMatrix = as.matrix(df)),
toolResult$knowSeq <- runKnowSeq(countMatrix = as.matrix(df),
groupName = groupNameModel,
numberReplic = numberReplicsModel)
View(toolResult)
toolResult$knowSeq <- runKnowSeq(countMatrix = as.matrix(df),
groupName = groupNameModel,
numberReplic = numberReplicsModel,
filterId = "entrezgene_id",)
toolResult$knowSeq <- runKnowSeq(countMatrix = as.matrix(df),
groupName = groupNameModel,
numberReplic = numberReplicsModel,
filterId = "entrezgene_id")
View(toolResult)
toolResult[["knowSeq"]]
toolResult$knowSeq <- runKnowSeq(countMatrix = as.matrix(df),
groupName = groupNameModel,
attributes = attributes,
numberReplic = numberReplicsModel,
filterId = "entrezgene_id")
load_all()
toolResult$knowSeq <- runKnowSeq(countMatrix = as.matrix(df),
groupName = groupNameModel,
attributes = attributes,
numberReplic = numberReplicsModel,
filterId = "entrezgene_id")
toolResult$knowSeq <- runKnowSeq(countMatrix = as.matrix(df),
groupName = groupNameModel,
numberReplic = numberReplicsModel,
filterId = "entrezgene_id")
toolResult$knowSeq <- runKnowSeq(countMatrix = as.matrix(df),
groupName = groupNameModel,
numberReplic = numberReplicsModel,
filterId = "entrezgene_id")
toolResult$knowSeq <- runKnowSeq(countMatrix = as.matrix(df),
groupName = groupNameModel,
numberReplic = numberReplicsModel,
filterId = "entrezgene_id", notSapiens = TRUE)
View(toolResult)
View(toolResult[["knowSeq"]])
load_all()
toolResult$knowSeq <- runKnowSeq(countMatrix = as.matrix(df),
groupName = groupNameModel,
numberReplic = numberReplicsModel,
filterId = "entrezgene_id", notSapiens = TRUE)
toolResult$knowSeq <- runKnowSeq(countMatrix = as.matrix(df),
groupName = groupNameModel,
numberReplic = numberReplicsModel,
filterId = "entrezgene_id")
View(toolResult)
runConsexpressionTestes()
toolResult$knowSeq <- runKnowSeq(countMatrix = as.matrix(df),
groupName = groupNameModel,
numberReplic = numberReplicsModel,
filterId = "external_gene_name")
View(toolResult)
toolResult$knowSeq <- runKnowSeq(countMatrix = as.matrix(df),
groupName = groupNameModel,
numberReplic = numberReplicsModel,
filterId = "percentage_gene_gc_content")
View(toolResult)
load_all()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
load_all()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
load_all()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
library(devtools)
library(shiny)
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
load_all()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
library(EBSeq)
?EBTest
?GetDEResults
?EBTest
load_all()
?EBTest
runConsexpressionTestes()
View(GSE95077_consexpression2)
View(GSE95077_consexpression2[["ebseq"]])
?EBTest
load_all()
View(GSE95077_consexpression2[["ebseq"]])
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
load_all()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
resultTool$knowseq <- runKnowSeq(as.matrix(df),
groupName = c("cb","jj"),
numberReplic = 3,
filterId = "ensembl_gene_id",
notSapiens = FALSE)
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
runNoiSeq(df, c("cb", "jj"))
runNoiSeq(df, designExperimentModel
)
runNoiSeq(df, designExperimentModel, normParm = "rpkm")
runNoiSeq(df, designExperimentModel, normParm = "rpkm", kParam = 0.5)
runNoiSeq(df, designExperimentModel, normParm = "rpkm", kParam = 0.5, factorParam = "cb")
runNoiSeq(df, designExperimentModel, normParm = "rpkm", kParam = 0.5, factorParam = "BM")
runNoiSeq(df, designExperimentModel, normParm = "rpkm", kParam = 0.5, factorParam = "Tissue")
runNoiSeq(df, designExperimentModel, normParm = "rpkm", kParam = 0.5, factorParam = "Tissue", lcParam = 0)
runNoiSeq(df, designExperimentModel, normParm = "rpkm", kParam = 0.5, factorParam = "Tissue", lcParam = 0, replicatesParam = "technical")
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
?noiseq
load_all()
runConsexpressionTestes()
load_all()
runConsexpressionTestes()
