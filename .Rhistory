return(metrics)
}
}
SRA010153_metrics2 <- metricsCalc(deToolList = SRA010153_deList, goldList = SRA010153_qRTPCR, pathOut = "/Volumes/SD128/consexpression2_testesOutput/data/SRA010153/", experimentName = "SRA010153")
metricsCalc <- function(deToolList,
goldList,
goldColGeneName = 1,
goldColValue = 2,
goldPositiveValue = c(1,-1),
goldNegativeValue = 0,
experimentName = "experiment",
pathOut = ".",
writeData = FALSE
){
cols = c("TP","FP", "TN", "FN", "TPR","Specificity","PPV", "ACC", "F1-Score")
toolNames <- names(deToolList)
metrics <- data.frame(matrix(0, ncol = length(cols),
nrow = length(toolNames)))
colnames(metrics) <- cols
row.names(metrics) <- toolNames
for (i in 1:length(deToolList)) {
condicao_TP <- (goldList[goldColValue] %in% goldPositiveValue) & (goldList[goldColGeneName] %in% row.names(deToolList[[i]]))
tp <- sum(condicao_TP)
condicao_FP <- (goldList[goldColValue] == goldNegativeValue) & (goldList[goldColGeneName] %in% row.names(deToolList[[i]]))
fp <- sum(condicao_FP)
condicao_TN <- (goldList[goldColValue] == goldNegativeValue) & (!(goldList[goldColGeneName] %in% row.names(deToolList[[i]])))
tn <- sum(condicao_TN)
condicao_FN <- (goldList[goldColValue] %in% goldPositiveValue) & (!(goldList[goldColGeneName] %in% row.names(deToolList[[i]])))
fn <- sum(condicao_FN)
#TPR (True Positive Rate), SPC (Specificity), PPV (Positive Predict Value), ACC (Accuracy) and F1 measure
tpr <- tp/(tp+fn)
spc <- tn/(tn+fp)
ppv <- tp/(tp+fp)
acc <- (tp + tn)/(tp+fp+tn+fn)
f1score <- 2*(ppv * tpr)/(ppv+tpr)
metrics[i,] <- c(tp, fp, tn, fn, tpr, spc, ppv, acc, f1score)
if(writeData){
write.csv(metrics, file = paste0(pathOut,experimentName,"_metrics.csv"))
}
return(metrics)
}
}
SRA010153_metrics2 <- metricsCalc(deToolList = SRA010153_deList, goldList = SRA010153_qRTPCR, pathOut = "/Volumes/SD128/consexpression2_testesOutput/data/SRA010153/", experimentName = "SRA010153")
View(SRA010153_metrics2)
SRA010153_qRTPCR[2] %in% c(1,-1)
SRA010153_qRTPCR[2,] %in% c(1,-1)
SRA010153_qRTPCR[,2] %in% c(1,-1)
SRA010153_qRTPCR[,2] == 0
metricsCalc <- function(deToolList,
goldList,
goldColGeneName = 1,
goldColValue = 2,
goldPositiveValue = c(1,-1),
goldNegativeValue = 0,
experimentName = "experiment",
pathOut = ".",
writeData = FALSE
){
cols = c("TP","FP", "TN", "FN", "TPR","Specificity","PPV", "ACC", "F1-Score")
toolNames <- names(deToolList)
metrics <- data.frame(matrix(0, ncol = length(cols),
nrow = length(toolNames)))
colnames(metrics) <- cols
row.names(metrics) <- toolNames
for (i in 1:length(deToolList)) {
condicao_TP <- (goldList[,goldColValue] %in% goldPositiveValue) & (goldList[,goldColGeneName] %in% row.names(deToolList[[i]]))
tp <- sum(condicao_TP)
condicao_FP <- (goldList[,goldColValue] == goldNegativeValue) & (goldList[,goldColGeneName] %in% row.names(deToolList[[i]]))
fp <- sum(condicao_FP)
condicao_TN <- (goldList[,goldColValue] == goldNegativeValue) & (!(goldList[,goldColGeneName] %in% row.names(deToolList[[i]])))
tn <- sum(condicao_TN)
condicao_FN <- (goldList[,goldColValue] %in% goldPositiveValue) & (!(goldList[,goldColGeneName] %in% row.names(deToolList[[i]])))
fn <- sum(condicao_FN)
#TPR (True Positive Rate), SPC (Specificity), PPV (Positive Predict Value), ACC (Accuracy) and F1 measure
tpr <- tp/(tp+fn)
spc <- tn/(tn+fp)
ppv <- tp/(tp+fp)
acc <- (tp + tn)/(tp+fp+tn+fn)
f1score <- 2*(ppv * tpr)/(ppv+tpr)
metrics[i,] <- c(tp, fp, tn, fn, tpr, spc, ppv, acc, f1score)
if(writeData){
write.csv(metrics, file = paste0(pathOut,experimentName,"_metrics.csv"))
}
return(metrics)
}
}
SRA010153_metrics2 <- metricsCalc(deToolList = SRA010153_deList, goldList = SRA010153_qRTPCR, pathOut = "/Volumes/SD128/consexpression2_testesOutput/data/SRA010153/", experimentName = "SRA010153")
View(SRA010153_metrics2)
metricsCalc <- function(deToolList,
goldList,
goldColGeneName = 1,
goldColValue = 2,
goldPositiveValue = c(1,-1),
goldNegativeValue = 0,
experimentName = "experiment",
pathOut = ".",
writeData = FALSE
){
cols = c("TP","FP", "TN", "FN", "TPR","Specificity","PPV", "ACC", "F1-Score")
toolNames <- names(deToolList)
metrics <- data.frame(matrix(0, ncol = length(cols),
nrow = length(toolNames)))
colnames(metrics) <- cols
row.names(metrics) <- toolNames
for (i in 1:length(deToolList)) {
cat(i,"\n")
condicao_TP <- (goldList[,goldColValue] %in% goldPositiveValue) & (goldList[,goldColGeneName] %in% row.names(deToolList[[i]]))
tp <- sum(condicao_TP)
condicao_FP <- (goldList[,goldColValue] == goldNegativeValue) & (goldList[,goldColGeneName] %in% row.names(deToolList[[i]]))
fp <- sum(condicao_FP)
condicao_TN <- (goldList[,goldColValue] == goldNegativeValue) & (!(goldList[,goldColGeneName] %in% row.names(deToolList[[i]])))
tn <- sum(condicao_TN)
condicao_FN <- (goldList[,goldColValue] %in% goldPositiveValue) & (!(goldList[,goldColGeneName] %in% row.names(deToolList[[i]])))
fn <- sum(condicao_FN)
#TPR (True Positive Rate), SPC (Specificity), PPV (Positive Predict Value), ACC (Accuracy) and F1 measure
tpr <- tp/(tp+fn)
spc <- tn/(tn+fp)
ppv <- tp/(tp+fp)
acc <- (tp + tn)/(tp+fp+tn+fn)
f1score <- 2*(ppv * tpr)/(ppv+tpr)
metrics[i,] <- c(tp, fp, tn, fn, tpr, spc, ppv, acc, f1score)
if(writeData){
write.csv(metrics, file = paste0(pathOut,experimentName,"_metrics.csv"))
}
return(metrics)
}
}
SRA010153_metrics2 <- metricsCalc(deToolList = SRA010153_deList, goldList = SRA010153_qRTPCR, pathOut = "/Volumes/SD128/consexpression2_testesOutput/data/SRA010153/", experimentName = "SRA010153")
metricsCalc <- function(deToolList,
goldList,
goldColGeneName = 1,
goldColValue = 2,
goldPositiveValue = c(1,-1),
goldNegativeValue = 0,
experimentName = "experiment",
pathOut = ".",
writeData = FALSE
){
cols = c("TP","FP", "TN", "FN", "TPR","Specificity","PPV", "ACC", "F1-Score")
toolNames <- names(deToolList)
metrics <- data.frame(matrix(0, ncol = length(cols),
nrow = length(toolNames)))
colnames(metrics) <- cols
row.names(metrics) <- toolNames
for (i in 1:length(toolNames)) {
cat(i,"\n")
condicao_TP <- (goldList[,goldColValue] %in% goldPositiveValue) & (goldList[,goldColGeneName] %in% row.names(deToolList[[i]]))
tp <- sum(condicao_TP)
condicao_FP <- (goldList[,goldColValue] == goldNegativeValue) & (goldList[,goldColGeneName] %in% row.names(deToolList[[i]]))
fp <- sum(condicao_FP)
condicao_TN <- (goldList[,goldColValue] == goldNegativeValue) & (!(goldList[,goldColGeneName] %in% row.names(deToolList[[i]])))
tn <- sum(condicao_TN)
condicao_FN <- (goldList[,goldColValue] %in% goldPositiveValue) & (!(goldList[,goldColGeneName] %in% row.names(deToolList[[i]])))
fn <- sum(condicao_FN)
#TPR (True Positive Rate), SPC (Specificity), PPV (Positive Predict Value), ACC (Accuracy) and F1 measure
tpr <- tp/(tp+fn)
spc <- tn/(tn+fp)
ppv <- tp/(tp+fp)
acc <- (tp + tn)/(tp+fp+tn+fn)
f1score <- 2*(ppv * tpr)/(ppv+tpr)
metrics[i,] <- c(tp, fp, tn, fn, tpr, spc, ppv, acc, f1score)
if(writeData){
write.csv(metrics, file = paste0(pathOut,experimentName,"_metrics.csv"))
}
return(metrics)
}
}
SRA010153_metrics2 <- metricsCalc(deToolList = SRA010153_deList, goldList = SRA010153_qRTPCR, pathOut = "/Volumes/SD128/consexpression2_testesOutput/data/SRA010153/", experimentName = "SRA010153")
metricsCalc <- function(deToolList,
goldList,
goldColGeneName = 1,
goldColValue = 2,
goldPositiveValue = c(1,-1),
goldNegativeValue = 0,
experimentName = "experiment",
pathOut = ".",
writeData = FALSE
){
cols = c("TP","FP", "TN", "FN", "TPR","Specificity","PPV", "ACC", "F1-Score")
toolNames <- names(deToolList)
metrics <- data.frame(matrix(0, ncol = length(cols),
nrow = length(toolNames)))
colnames(metrics) <- cols
row.names(metrics) <- toolNames
for (i in 1:length(toolNames)) {
cat(i,"\n")
condicao_TP <- (goldList[,goldColValue] %in% goldPositiveValue) & (goldList[,goldColGeneName] %in% row.names(deToolList[[i]]))
tp <- sum(condicao_TP)
condicao_FP <- (goldList[,goldColValue] == goldNegativeValue) & (goldList[,goldColGeneName] %in% row.names(deToolList[[i]]))
fp <- sum(condicao_FP)
condicao_TN <- (goldList[,goldColValue] == goldNegativeValue) & (!(goldList[,goldColGeneName] %in% row.names(deToolList[[i]])))
tn <- sum(condicao_TN)
condicao_FN <- (goldList[,goldColValue] %in% goldPositiveValue) & (!(goldList[,goldColGeneName] %in% row.names(deToolList[[i]])))
fn <- sum(condicao_FN)
#TPR (True Positive Rate), SPC (Specificity), PPV (Positive Predict Value), ACC (Accuracy) and F1 measure
tpr <- tp/(tp+fn)
spc <- tn/(tn+fp)
ppv <- tp/(tp+fp)
acc <- (tp + tn)/(tp+fp+tn+fn)
f1score <- 2*(ppv * tpr)/(ppv+tpr)
metrics[i,] <- c(tp, fp, tn, fn, tpr, spc, ppv, acc, f1score)
}
if(writeData){
write.csv(metrics, file = paste0(pathOut,experimentName,"_metrics.csv"))
}
return(metrics)
}
SRA010153_metrics2 <- metricsCalc(deToolList = SRA010153_deList, goldList = SRA010153_qRTPCR, pathOut = "/Volumes/SD128/consexpression2_testesOutput/data/SRA010153/", experimentName = "SRA010153")
View(SRA010153_metrics2)
GSE95077_metrics2 <- metricsCalc(deToolList = GSE95077_deList, goldList = GSE95077_qRTPCR, pathOut = "/Volumes/SD128/consexpression2_testesOutput/data/GSE95077/", experimentName = "GSE95077", goldColGeneName = 2, goldColValue = 1, goldPositiveValue = c("Selected"), goldNegativeValue = "NO")
View(GSE95077_metrics2)
View(GSE95077_metrics)
View(GSE95077_DE_Tool)
row.names(consexpressionList[[1]])
row.names(SRA010153_consexpression2[[1]])
listDeByTool <- function(consexpressionList, deList){
deTool <- data.frame(matrix(0, ncol = length(consexpressionList),
nrow = nrow(consexpressionList)))
colnames(deTool) <- names(consexpressionList)
row.names(deTool) <- row.names(consexpressionList[[1]])
toolNames <- names(consexpressionList)
geneNames <- row.names(consexpressionList)
t <- 1
for (toolDe in consexpressionList) {
genesDe <- rownames(toolDe)
for (i in 1:length(geneNames)) {
if(geneNames[i] %in% deList){
deTool[geneNames[i], t] <- 1
} else {
print("Termo nÃ£o encontrado.")
}
}
t <- t + 1
}
return(deTool)
}
teste <- listDeByTool(SRA010153_consexpression2, SRA010153_deList)
View(SRA010153_consexpression2)
listDeByTool <- function(consexpressionList, deList){
deTool <- data.frame(matrix(0, ncol = length(consexpressionList),
nrow = nrow(consexpressionList[[2]])))
colnames(deTool) <- names(consexpressionList)
row.names(deTool) <- row.names(consexpressionList[[1]])
toolNames <- names(consexpressionList)
geneNames <- row.names(consexpressionList)
t <- 1
for (toolDe in consexpressionList) {
genesDe <- rownames(toolDe)
for (i in 1:length(geneNames)) {
if(geneNames[i] %in% deList){
deTool[geneNames[i], t] <- 1
} else {
print("Termo nÃ£o encontrado.")
}
}
t <- t + 1
}
return(deTool)
}
teste <- listDeByTool(SRA010153_consexpression2, SRA010153_deList)
listDeByTool <- function(consexpressionList, deList){
deTool <- data.frame(matrix(0, ncol = length(consexpressionList),
nrow = nrow(consexpressionList[[2]])))
colnames(deTool) <- names(consexpressionList)
row.names(deTool) <- row.names(consexpressionList[[2]])
toolNames <- names(consexpressionList)
geneNames <- row.names(consexpressionList)
t <- 1
for (toolDe in consexpressionList) {
genesDe <- rownames(toolDe)
for (i in 1:length(geneNames)) {
if(geneNames[i] %in% deList){
deTool[geneNames[i], t] <- 1
} else {
print("Termo nÃ£o encontrado.")
}
}
t <- t + 1
}
return(deTool)
}
teste <- listDeByTool(SRA010153_consexpression2, SRA010153_deList)
listDeByTool <- function(consexpressionList, deList){
deTool <- data.frame(matrix(0, ncol = length(consexpressionList),
nrow = nrow(consexpressionList[[2]])))
colnames(deTool) <- names(consexpressionList)
row.names(deTool) <- row.names(consexpressionList[[2]])
toolNames <- names(consexpressionList)
geneNames <- row.names(consexpressionList)
t <- 1
for (toolDe in consexpressionList) {
genesDe <- rownames(toolDe)
for (i in 1:length(geneNames)) {
if(geneNames[i] %in% deList[toolNames[t]]){
deTool[geneNames[i], t] <- 1
} else {
print("Termo nÃ£o encontrado.")
}
}
t <- t + 1
}
return(deTool)
}
teste <- listDeByTool(SRA010153_consexpression2, SRA010153_deList)
View(SRA010153_deList)
listDeByTool <- function(consexpressionList, deList){
deTool <- data.frame(matrix(0, ncol = length(consexpressionList),
nrow = nrow(consexpressionList[[2]])))
colnames(deTool) <- names(consexpressionList)
row.names(deTool) <- row.names(consexpressionList[[2]])
toolNames <- names(consexpressionList)
geneNames <- row.names(consexpressionList)
t <- 1
for (toolDe in consexpressionList) {
genesDe <- rownames(toolDe)
for (i in 1:length(geneNames)) {
if(geneNames[i] %in% deList[[t]]){
deTool[geneNames[i], t] <- 1
} else {
print("Termo nÃ£o encontrado.")
}
}
t <- t + 1
}
return(deTool)
}
teste <- listDeByTool(consexpressionList = SRA010153_consexpression2, deList = SRA010153_deList)
listDeByTool <- function(consexpressionList, deList){
deTool <- data.frame(matrix(0, ncol = length(consexpressionList),
nrow = nrow(consexpressionList[[2]])))
colnames(deTool) <- names(consexpressionList)
row.names(deTool) <- row.names(consexpressionList[[2]])
toolNames <- names(consexpressionList)
geneNames <- row.names(consexpressionList[[2]])
t <- 1
for (toolDe in consexpressionList) {
genesDe <- rownames(toolDe)
for (i in 1:length(geneNames)) {
if(geneNames[i] %in% deList[[t]]){
deTool[geneNames[i], t] <- 1
} else {
print("Termo nÃ£o encontrado.")
}
}
t <- t + 1
}
return(deTool)
}
teste <- listDeByTool(consexpressionList = SRA010153_consexpression2, deList = SRA010153_deList)
View(teste)
gNames <- row.names(SRA010153_consexpression2[[2]])
gNames[1] %in% SRA010153_deList[1]
View(SRA010153_deList)
View(SRA010153_deList[["knowseq"]])
gNames[1] %in% row.names(SRA010153_deList[1])
gNames[2] %in% row.names(SRA010153_deList[1])
gNames[3] %in% row.names(SRA010153_deList[1])
gNames[4] %in% row.names(SRA010153_deList[1])
gNames[5] %in% row.names(SRA010153_deList[1])
row.names(SRA010153_deList[1])
row.names(SRA010153_deList[[1]])
listDeByTool <- function(consexpressionList, deList){
deTool <- data.frame(matrix(0, ncol = length(consexpressionList),
nrow = nrow(consexpressionList[[2]])))
colnames(deTool) <- names(consexpressionList)
row.names(deTool) <- row.names(consexpressionList[[2]])
toolNames <- names(consexpressionList)
geneNames <- row.names(consexpressionList[[2]])
t <- 1
for (toolDe in consexpressionList) {
genesDe <- rownames(toolDe)
for (i in 1:length(geneNames)) {
if(geneNames[i] %in% row.nams(deList[[t]])){
deTool[geneNames[i], t] <- 1
} else {
print("Termo nÃ£o encontrado.")
}
}
t <- t + 1
}
return(deTool)
}
teste <- listDeByTool(consexpressionList = SRA010153_consexpression2, deList = SRA010153_deList)
listDeByTool <- function(consexpressionList, deList){
deTool <- data.frame(matrix(0, ncol = length(consexpressionList),
nrow = nrow(consexpressionList[[2]])))
colnames(deTool) <- names(consexpressionList)
row.names(deTool) <- row.names(consexpressionList[[2]])
toolNames <- names(consexpressionList)
geneNames <- row.names(consexpressionList[[2]])
t <- 1
for (toolDe in consexpressionList) {
genesDe <- rownames(toolDe)
for (i in 1:length(geneNames)) {
if(geneNames[i] %in% row.names(deList[[t]])){
deTool[geneNames[i], t] <- 1
} else {
print("Termo nÃ£o encontrado.")
}
}
t <- t + 1
}
return(deTool)
}
teste <- listDeByTool(consexpressionList = SRA010153_consexpression2, deList = SRA010153_deList)
View(teste)
upSetPlotTools(teste, "SRA_all", pathOut = "/Volumes/SD128/consexpression2_testesOutput/SRA010153/", TRUE)
teste_sum <- upSetPlotTools(teste, "SRA_all", pathOut = "/Volumes/SD128/consexpression2_testesOutput/SRA010153/", TRUE)
teste_sum <- upSetPlotTools(teste, "SRA_all", pathOut = "/Volumes/SD128/consexpression2_testesOutput/SRA010153/", TRUE)
teste$nDE <- rowSums(teste)
r <- teste$nDE >= 2
r
testeCons <- subset(teste, r)
View(testeCons)
SRA010153_consensus <- list()
remove(teste, teste_sum, testeCons, r, ppv, t)
consensusList <- function(deTool,
threshold = 2){
deTool$nDE <- rowSums(deTool)
consensus <- deTool$nDE >= threshold
deCons <- subset(deTool, consensus)
}
SRA010153_consensus <- list()
for (i in 1: colnames(SRA010153_DE_Tool)) {
SRA010153_consensus[[i]] <- consensusList(SRA010153_DE_Tool, i)
}
consensusList <- function(deTool,
threshold = 2){
deTool$nDE <- rowSums(deTool)
consensus <- deTool$nDE >= threshold
deCons <- subset(deTool, consensus)
}
SRA010153_consensus <- list()
for (i in 1: colnames(SRA010153_DE_Tool)) {
SRA010153_consensus[[i]] <- consensusList(SRA010153_DE_Tool, i)
}
colnames(SRA010153_DE_Tool)
SRA010153_consensus <- list()
for (i in 1: length(colnames(SRA010153_DE_Tool))) {
SRA010153_consensus[[i]] <- consensusList(SRA010153_DE_Tool, i)
}
View(SRA010153_consensus)
namesCons <- c()
SRA010153_consensus <- list()
namesCons <- c()
for (i in 1: length(colnames(SRA010153_DE_Tool))) {
namesCons[i] <- paste("Number os Tools:" ,i)
SRA010153_consensus[[i]] <- consensusList(SRA010153_DE_Tool, i)
}
names(SRA010153_consensus) <- namesCons
SRA010153_consensus_metrics <-metricsCalc(deToolList = SRA010153_consensus, goldList = SRA010153_qRTPCR, pathOut = "/Volumes/SD128/consexpression2_testesOutput/data/SRA010153/", experimentName = "SRA010153_consensus")
View(SRA010153_consensus_metrics)
View(GSE95077_DE_Tool)
\cite(samr)
cite(samr)
library(samr)
BiocManager::install("consexpressionR")
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install(version="devel")
BiocManager::install(version="devel")
BiocManager::install(version="3.18")
BiocManager::install(version="devel")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.18")
BiocManager::install(version="devel")
load("/Volumes/SD128/GitHub/consexpression2/.RData")
BiocManager::install(version="devel")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.18")
library(BiocManager)
BiocManager::install(version="devel")
version()
library(devtools)
load_all()
nameFile <- createNameFileOutput (outDi"data/", "expermient1")
nameFile <- createNameFileOutput (outDirPath = "data/", execName = "expermient1")
print(nameFile)
df <- data.frame(col1 = c("treat1", "treat2", "treat3"),
col22 = c(1, 2, 3),)
df <- data.frame(col1 = c("treat1", "treat2", "treat3"),
col22 = c(1, 2, 3), row.names = c("gene1"))
df <- data.frame(col1 = c("treat1", "treat2", "treat3"),
col2 = c(1, 2, 3))
writeResults(data = df, toolName = "test")
exp_result <- consexpressionR(numberReplics = 3, groupName = c("BM", "JJ"), tableCountPath = "data/GSE95077_filtred.csv", sepCharacter = ",", experimentName = "GSE95077", outDirPath = "." )
load_all()
exp_result <- consexpressionR(numberReplics = 3, groupName = c("BM", "JJ"), tableCountPath = "data/GSE95077_filtred.csv", sepCharacter = ",", experimentName = "GSE95077", outDirPath = "." )
install.packages("impute")
BiocManager::install("impute")
library(impute)
?impute
?impute.knn
load_all()
exp_result <- consexpressionR(numberReplics = 3, groupName = c("BM", "JJ"), tableCountPath = "data/GSE95077_filtred.csv", sepCharacter = ",", experimentName = "GSE95077", outDirPath = "." )
cons_exp <- expressionDefinition(resultTool = exp_result)
check()
exp_result <- consexpressionR(numberReplics = 3, groupName = c("BM", "JJ"), tableCountPath = "data/GSE95077_filtred.csv", sepCharacter = ",", experimentName = "GSE95077", outDirPath = "." )
check()
library(devtools)
load_all()
check()
library(variancePartition)
check()
install.packages("tximport")
library(tximpor)
library(tximport)
BiocManager::install("tximport")
library(tximport)
save.image("/Volumes/SD128/GitHub/consexpression_supportFiles/consexpressionR_2902.RData")
