sets = colnames(df),
sets.bar.color = "#56B4E9",
order.by = "freq",
empty.intersections = "on")
grDevices::pdf(paste0(pathOut,
"upset_plot_",
condition ,
".pdf"),
width = 10,
height = 7.5,
onefile = FALSE)
print(meu_grafico)
grDevices::dev.off()
df$`number of methods` <- rowSums(df)
utils::write.csv(df,
file = paste0(pathOut,
"upset_plot_",
condition ,
".csv"))
}else{
df$`number of methods` <- rowSums(df)
UpSetR::upset(df,
sets = colnames(df),
sets.bar.color = "#56B4E9",
order.by = "freq",
empty.intersections = "on")
}
return(df)
}
upSetPlotData <- upSetPlotTools(df = deByTool,
condition = "Control_vs_Treat",
writeData = FALSE)
upSetPlotTools <- function(df,
condition = "condition_default",
pathOut = ".",
writeData = TRUE){
df[is.na(df)] <- 0
if(writeData){
meu_grafico <- UpSetR::upset(df,
sets = colnames(df),
sets.bar.color = "#56B4E9",
order.by = "freq",
empty.intersections = "on")
grDevices::pdf(paste0(pathOut,
"upset_plot_",
condition ,
".pdf"),
width = 10,
height = 7.5,
onefile = FALSE)
print(meu_grafico)
grDevices::dev.off()
df$`number of methods` <- rowSums(df)
utils::write.csv(df,
file = paste0(pathOut,
"upset_plot_",
condition ,
".csv"))
}else{
df$`number of methods` <- rowSums(df)
UpSetR::upset(df,
sets = colnames(df),
sets.bar.color = "#56B4E9",
order.by = "freq",
empty.intersections = "on")
grDevices::pdf(paste0(pathOut,
"upset_plot_",
condition ,
".pdf"),
width = 10,
height = 7.5,
onefile = FALSE)
print(meu_grafico)
grDevices::dev.off()
}
return(df)
}
upSetPlotData <- upSetPlotTools(df = deByTool,
condition = "Control_vs_Treat",
writeData = FALSE)
upSetPlotTools <- function(df,
condition = "condition_default",
pathOut = ".",
writeData = TRUE){
df[is.na(df)] <- 0
if(writeData){
meu_grafico <- UpSetR::upset(df,
sets = colnames(df),
sets.bar.color = "#56B4E9",
order.by = "freq",
empty.intersections = "on")
grDevices::pdf(paste0(pathOut,
"upset_plot_",
condition ,
".pdf"),
width = 10,
height = 7.5,
onefile = FALSE)
print(meu_grafico)
grDevices::dev.off()
df$`number of methods` <- rowSums(df)
utils::write.csv(df,
file = paste0(pathOut,
"upset_plot_",
condition ,
".csv"))
}else{
df$`number of methods` <- rowSums(df)
meu_grafico <- UpSetR::upset(df,
sets = colnames(df),
sets.bar.color = "#56B4E9",
order.by = "freq",
empty.intersections = "on")
grDevices::pdf(paste0(pathOut,
"upset_plot_",
condition ,
".pdf"),
width = 10,
height = 7.5,
onefile = FALSE)
print(meu_grafico)
grDevices::dev.off()
}
return(df)
}
upSetPlotData <- upSetPlotTools(df = deByTool,
condition = "Control_vs_Treat",
writeData = FALSE)
upSetPlotData <- upSetPlotTools(df = deByTool,
condition = "Control_vs_Treat",
writeData = TRUE)
upSetPlotData <- upSetPlotTools(df = deByTool,
condition = "Control_vs_Treat",
pathOut = "."
writeData = TRUE)
upSetPlotData <- upSetPlotTools(df = deByTool,
condition = "Control_vs_Treat",
pathOut = ".",
writeData = TRUE)
upSetPlotData <- upSetPlotTools(df = deByTool,
condition = "Control_vs_Treat",
pathOut = "/Volumes/SD128/",
writeData = TRUE)
upSetPlotTools <- function(df,
condition = "condition_default",
pathOut = ".",
writeData = TRUE){
df[is.na(df)] <- 0
meu_grafico <- UpSetR::upset(df,
sets = colnames(df),
sets.bar.color = "#56B4E9",
order.by = "freq",
empty.intersections = "on")
df$`number of methods` <- rowSums(df)
if(writeData){
grDevices::pdf(paste0(pathOut,"upset_plot_",condition,".pdf"),
width = 10,
height = 7.5,
onefile = FALSE)
print(meu_grafico)
grDevices::dev.off()
utils::write.csv(df,
file = paste0(pathOut,"upset_plot_", condition,".csv"))
}
return(df)
}
upSetPlotData <- upSetPlotTools(df = deByTool,
condition = "Control_vs_Treat",
pathOut = "/Volumes/SD128/",
writeData = TRUE)
upSetPlotData <- upSetPlotTools(df = deByTool,
condition = "Control_vs_Treat",
pathOut = "/Volumes/SD128/",
writeData = FALSE)
upSetPlotData <- upSetPlotTools(df = deByTool,
condition = "Control_vs_Treat",
pathOut = "/Volumes/SD128/",
writeData = FALSE)
upSetPlotData <- upSetPlotTools(df = deByTool,
condition = "Control_vs_Treat",
pathOut = "/Volumes/SD128/",
writeData = FALSE)
UpSetR::upset(df,
sets = colnames(deByTool),
sets.bar.color = "#56B4E9",
order.by = "freq",
empty.intersections = "on")
View(deByTool)
UpSetR::upset(df,sets = colnames(deByTool),sets.bar.color = "#56B4E9",order.by = "freq", empty.intersections = "on")
UpSetR::upset(deByTool,sets = colnames(deByTool),sets.bar.color = "#56B4E9",order.by = "freq", empty.intersections = "on")
load_all()
roxygenise()
check()
library(devtools)
library(consexpressionR)
load_all()
remove(upSetPlotTools())
remove(upSetPlotTools
)
load_all()
runConsexpressionR()
runConsexpressionR()
library(shinydashboard)
runConsexpressionR()
library(shiny)
library(shinyjs)
runConsexpressionR()
runConsexpressionR()
runConsexpressionR()
load_all()
runConsexpressionR()
load_all()
runConsexpressionR()
load_all()
load_all()
runConsexpressionR()
load_all()
runConsexpressionR()
load_all()
runConsexpressionR()
load_all()
load_all()
runConsexpressionR()
load_all()
runConsexpressionR()
runConsexpressionR()
load_all()
runConsexpressionR()
?toggle
runConsexpressionR()
load_all()
runConsexpressionR()
library(devtools)
load
load_all()
load_all()
load_all()
runConsexpressionR()
runConsexpressionR()
library(shiny)
library(shinydashboard)
runConsexpressionR()
runConsexpressionR()
load_all()
runConsexpressionR()
runConsexpressionR()
load_all()
rlang::last_trace()
load_all()
runConsexpressionR()
runConsexpressionR()
load_all()
runConsexpressionR()
library(shiny)
library(shinydashboard)
runConsexpressionR()
load_all()
runConsexpressionR()
load_all()
runConsexpressionR()
load_all()
runConsexpressionR()
load_all()
runConsexpressionR()
load_all()
runConsexpressionR()
load_all()
runConsexpressionR()
load_all()
runConsexpressionR()
load_all()
runConsexpressionR()
load_all()
runConsexpressionR()
load_all()
runConsexpressionR()
load_all()
runConsexpressionR()
load_all()
runConsexpressionR()
load_all()
runConsexpressionR()
load_all()
runConsexpressionR()
load_all()
runConsexpressionR()
load_all()
runConsexpressionR()
runConsexpressionR()
load_all()
runConsexpressionR()
load_all()
runConsexpressionR()
load_all()
runConsexpressionR()
load_all()
runConsexpressionR()
load_all()
runConsexpressionR()
load_all()
runConsexpressionR()
load_all()
runConsexpressionR()
runConsexpressionR()
load_all()
runConsexpressionR()
load_all()
runConsexpressionR()
is.null(cons_result)
variavel <- list()
is.null(variavel)
length(variavel)
load_all()
runConsexpressionR()
load_all()
runConsexpressionR()
library(UpSetR)
upset(deByTool,
sets = colnames(deByTool),
sets.bar.color = "#56B4E9",
order.by = "freq",
empty.intersections = "on")
load_all()
runConsexpressionR()
load_all()
runConsexpressionR()
df_upload <- shiny::reactive({
inFile <- input$tableCountInp
if (is.null(inFile))
return(NULL)
df <- readCountFile(inFile$datapath, input$sepCharcterInp)
cons_result <- consexpressionR(numberReplics = input$numberReplicsInp,
rDataFrameCount = df,
groupName = c(unlist(strsplit(input$groupNameInp, ",")))
)
expDef_result <- expressionDefinition(resultTool = cons_result)
deByTool <- listDeByTool(cons_result, expDef_result)
plotUp <- UpSetR::upset(deByTool,
sets = colnames(deByTool),
sets.bar.color = "#56B4E9",
order.by = "freq",
empty.intersections = "on")
output$upset <- renderPlot(plotUp)
return(df)
})
library(devtools)
load_all()
runConsexpressionR()
library(shiny)
usethis::use_import_from("icon", "shiny")
usethis::use_import_from("shiny","icon")
usethis::use_import_from("shiny","fluidRow")
usethis::use_import_from("shiny","textInput")
usethis::use_import_from("shiny","numericInput")
usethis::use_import_from("shiny","hempText")
usethis::use_import_from("shiny","tags")
usethis::use_import_from("shiny","selectInput")
usethis::use_import_from("shiny","fileInput")
usethis::use_import_from("shiny","textOutput")
usethis::use_import_from("shiny","plotOutput")
usethis::use_import_from("shinydashboard","dashboardPage")
usethis::use_import_from("shinydashboard","dashboardHeader")
usethis::use_import_from("shinydashboard","dashboardSidebar")
usethis::use_import_from("shinydashboard","sidebarMenu")
usethis::use_import_from("shinydashboard","menuItem")
usethis::use_import_from("shinydashboard","dashboardBody")
usethis::use_import_from("shinydashboard","tabItems")
usethis::use_import_from("shinydashboard","tabItem")
usethis::use_import_from("shinydashboard","box")
usethis::use_import_from("DT","dataTableOutput")
usethis::use_import_from("shiny","reactive")
usethis::use_import_from("UpSetR","upset")
usethis::use_import_from("shiny","validate")
usethis::use_import_from("shiny","need")
usethis::use_import_from("shiny","renderPrint")
usethis::use_import_from("shiny","shinyApp")
runConsexpressionR()
View(deByTool)
runConsexpressionR()
library(js)
install.packages("js")
library(js)
usethis::use_import_from("js")
usethis::use_import_from("js", "on")
load_all()
runConsexpressionR()
usethis::use_import_from("shinyjs", "inlineJS")
load_all()
runConsexpressionR()
usethis::use_import_from("shiny", "addResource")
load_all()
runConsexpressionR()
library(plotly)
install.packages("plotly")
library(plotly)
usethis::use_import_from("plotly", "callMenu")
usethis::use_import_from("shinyjs", "ccreateFunction")
usethis::use_import_from("shinyjs", "createFunction")
usethis::use_import_from("shinyjs", "createFunction")
load_all()
runConsexpressionR()
usethis::use_import_from("plotly", "renderPlotly")
load_all()
runConsexpressionR()
load_all()
runConsexpressionR()
load_all()
runConsexpressionR()
load_all()
runConsexpressionR()
load_all()
runConsexpressionR()
load_all()
runConsexpressionR()
load_all()
runConsexpressionR()
load_all()
runConsexpressionR()
load_all()
runConsexpressionR()
load_all()
runConsexpressionR()
load_all()
runConsexpressionR()
load_all()
runConsexpressionR()
load_all()
runConsexpressionR()
load_all()
runConsexpressionR()
?shiny::div()
load_all()
load_all()
?shiny::div()
runConsexpressionR()
load_all()
runConsexpressionR()
load_all()
runConsexpressionR()
load_all()
runConsexpressionR()
load_all()
runConsexpressionR()
load_all()
runConsexpressionR()
load_all()
load_all()
load_all()
load_all()
load_all()
runConsexpressionR()
load_all()
load_all()
runConsexpressionR()
load_all()
load_all()
runConsexpressionR()
load_all()
runConsexpressionR()
load_all()
runConsexpressionR()
load_all()
runConsexpressionR()
load_all()
runConsexpressionR()
load_all()
runConsexpressionR()
load_all()
runConsexpressionR()
load_all()
runConsexpressionR()
load_all()
runConsexpressionR()
load_all()
runConsexpressionR()
load_all()
runConsexpressionR()
load_all()
runConsexpressionR()
load_all()
runConsexpressionR()
load_all()
runConsexpressionR()
load_all()
runConsexpressionR()
library(backports)
load_all()
library(backports)
runConsexpressionR()\
runConsexpressionR()
load_all()
runConsexpressionR()
library(KnowSeq)
?knowseqReport
?getGenesAnnotation
load_all()
runConsexpressionR()
load_all()
runConsexpressionR()
load_all()
runConsexpressionR()
load_all()
library(devtools)
load_all()
runConsexpressionR()
library(backports)
library(shinydashboard)
library(shiny)
runConsexpressionR()
runConsexpressionR()
runConsexpressionR()
View(deByTool)
