genesNames = FALSE)
View(expressionMatrix)
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,
labels = c("BM","BM","JJ","JJ","AML","AML"),
multiDegsMethod = "nmax")
View(expressionMatrix)
View(expressionMatrix)
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,
labels = colnames(expressionMatrix),
multiDegsMethod = "nmax")
colnames(expressionMatrix)
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,
labels = colnames(expressionMatrix),
multiDegsMethod = "nmax")
write.csv(table_count_df_know, file = "knowSeq_data.csv")
View(table_count_df_know)
designExp <- model.matrix(~ c("BM","JJ", "AML"))
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,
labels = designExp,
multiDegsMethod = "cov")
designExp <-as.factor(c("BM","JJ", "AML"))
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,
labels = designExp,
multiDegsMethod = "cov")
designExp <-as.factor(rep(c("BM","JJ", "AML"), each = 2))
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,
labels = designExp,
multiDegsMethod = "cov")
library(devtools)
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,labels = designExp,multiDegsMethod = "cov")
expressionMatrix <- KnowSeq::calculateGeneExpressionValues(countsMatrix = as.matrix(table_count_df_know),genesNames = FALSE)
myAnnotation <- KnowSeq::getGenesAnnotation(values = as.character(row.names(table_count_df_know)), filter="ensembl_gene_id", notHSapiens = FALSE)
expressionMatrix <- KnowSeq::calculateGeneExpressionValues(countsMatrix = as.matrix(table_count_df_know),genesNames = FALSE, annotation = myAnnotation)
library(cqn)
expressionMatrix <- KnowSeq::calculateGeneExpressionValues(countsMatrix = as.matrix(table_count_df_know),genesNames = FALSE, annotation = myAnnotation)
View(myAnnotation)
View(expressionMatrix)
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,labels = colnames(expressionMatrix) ,multiDegsMethod = "cov")
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,labels = as.factor(colnames(expressionMatrix)) ,multiDegsMethod = "cov")
designExperiment <- rep(c("BM", "JJ", "AML"), each = 2)
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,labels = designExperiment ,multiDegsMethod = "cov")
?KnowSeq::DEGsExtraction
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,labels = designExperiment ,multiDegsMethod = "cov", pvalue = 0.01)
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,labels = designExperiment ,multiDegsMethod = "cov", pvalue = 0.01, lfc = 0.5)
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,labels = designExperiment ,multiDegsMethod = "cov", pvalue = 0.01, lfc = 2)
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,labels = designExperiment ,multiDegsMethod = "cov", pvalue = 0.01, lfc = -2)
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,labels = designExperiment ,multiDegsMethod = "cov", pvalue = 0.01, lfc = -1)
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,labels = designExperiment ,multiDegsMethod = "cov", pvalue = 0.01, lfc = 0
)
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,labels = designExperiment ,multiDegsMethod = "cov", lfc = 0)
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,labels = designExperiment ,multiDegsMethod = "cov", cov =1)
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,labels = designExperiment ,multiDegsMethod = "cov", cov =2)
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,labels = designExperiment ,multiDegsMethod = "cov", cov =0.5)
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,labels = designExperiment ,multiDegsMethod = "cov", cov =3)
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,labels = designExperiment ,multiDegsMethod = "cov", cov =3, pvalue = 0.01)
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,labels = designExperiment ,multiDegsMethod = "cov", cov =3, pvalue = 0.01, lfc = 1.5)
designExperiment[1]
designExperiment[0]
designExperiment[2]
designExperiment[2] <- "BM.1"
designExperiment[4]
designExperiment[3]
designExperiment[4] <- "JJ.1"
designExperiment[6] <- "AML.1"
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,labels = designExperiment ,multiDegsMethod = "cov", cov =3, pvalue = 0.01, lfc = 1.5)
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,labels = designExperiment ,multiDegsMethod = "cov")
designExperiment <- rep(c("BM", "JJ", "AML"), each = 2)
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,labels = designExperiment ,multiDegsMethod = "cov")
colnames(expressionMatrix)
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,labels = as.factor() ,multiDegsMethod = "cov")
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,labels = as.factor(colnames(expressionMatrix)) ,multiDegsMethod = "cov")
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,labels = as.factor(colnames(expressionMatrix)) ,multiDegsMethod = "cov", cov = 5)
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,labels = as.factor(colnames(expressionMatrix)) ,multiDegsMethod = "cov", cov = 5, nmax = 100)
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,labels = as.factor(colnames(expressionMatrix)) ,multiDegsMethod = "cov", cov = 5, nmax = 100, pvalue = 100)
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,labels = as.factor(colnames(expressionMatrix)) ,multiDegsMethod = "cov", cov = 5, nmax = 100, pvalue = 0.9)
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,labels = as.factor(colnames(expressionMatrix)) ,multiDegsMethod = "cov", cov = 5, nmax = 100, lfc = 0)
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,labels = as.factor(colnames(expressionMatrix)) ,multiDegsMethod = "nmax", cov = 5, nmax = 100, lfc = 0)
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,labels = as.factor(colnames(expressionMatrix)) ,multiDegsMethod = "nmax", nmax = 100, lfc = 0)
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,labels = as.factor(colnames(expressionMatrix)) ,multiDegsMethod = "nmax", nmax = 100)
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,labels = as.factor(colnames(expressionMatrix)) ,multiDegsMethod = "nmax", nmax = 10)
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,labels = as.factor(colnames(expressionMatrix)) ,multiDegsMethod = "nmax", nmax = 5)
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,labels = as.factor(colnames(expressionMatrix)) ,multiDegsMethod = "nmax", nmax = 5, number =
1000)
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,labels = as.factor(colnames(expressionMatrix)) ,multiDegsMethod = "nmax", nmax = 5, number = 100, numFolds = 3)
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,labels = as.factor(colnames(expressionMatrix)) ,multiDegsMethod = "nmax", nmax = 5, number = 100, numFolds = 5)
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,labels = as.factor(colnames(expressionMatrix)) ,multiDegsMethod = "nmax", nmax = 5)
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,labels = as.factor(colnames(expressionMatrix)) ,multiDegsMethod = "nmax")
library(KnowSeq)
dir <- system.file("extdata", package="KnowSeq")
load(paste(dir,"/expressionExample.RData",sep = ""))
labels
View(countsMatrix)
expressionMatrix <- calculateGeneExpressionValues(countsMatrix,myAnnotation, genesNames = TRUE)
View(expressionMatrix)
expressionMatrix <- calculateGeneExpressionValues(table_count_df_know,myAnnotation, genesNames = FALSE)
expressionMatrix <- calculateGeneExpressionValues(as.matrix(table_count_df_know),myAnnotation, genesNames = FALSE)
library(cqn)
expressionMatrix <- calculateGeneExpressionValues(as.matrix(table_count_df_know),myAnnotation, genesNames = FALSE)
expressionMatrix <- KnowSeq::calculateGeneExpressionValues(countsMatrix = as.matrix(table_count_df_know),genesNames = FALSE, annotation = myAnnotation)
View(expressionMatrix)
myAnnotation <- KnowSeq::getGenesAnnotation(values = as.character(row.names(table_count_df_know)), filter="ensembl_gene_id", notHSapiens = FALSE)
expressionMatrix <- KnowSeq::calculateGeneExpressionValues(countsMatrix = as.matrix(table_count_df_know),genesNames = FALSE, annotation = myAnnotation)
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,labels = as.factor(colnames(expressionMatrix)) ,multiDegsMethod = "nmax")
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,labels = designExperiment ,multiDegsMethod = "nmax")
View(expressionMatrix)
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,labels = designExperiment ,multiDegsMethod = "nmax", CV=TRUE)
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,labels = designExperiment ,multiDegsMethod = "nmax", CV=TRUE, numFolds = 2)
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,labels = designExperiment ,multiDegsMethod = "nmax", CV=TRUE, numFolds = 100)
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,labels = designExperiment ,multiDegsMethod = "nmax", CV=TRUE, numFolds = 50)
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,labels = designExperiment ,multiDegsMethod = "nmax", CV=TRUE, numFolds = 31)
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,labels = designExperiment ,multiDegsMethod = "nmax", CV=TRUE, numFolds = 15)
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,labels = designExperiment ,multiDegsMethod = "nmax", CV=TRUE, numFolds = 10)
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,labels = designExperiment ,multiDegsMethod = "nmax", CV=TRUE, numFolds = 8)
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,labels = designExperiment ,multiDegsMethod = "nmax", CV=TRUE, numFolds = 12)
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,labels = designExperiment ,multiDegsMethod = "nmax", CV=TRUE, numFolds = 6)
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,labels = designExperiment ,multiDegsMethod = "nmax", CV=TRUE, numFolds = 10)
designExperiment <- model.matrix(~ 0 + factor(colnames(expressionMatrix)))
colnames(designExperiment) <- c("BM", "JJ", "AML")
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,labels = designExperiment ,multiDegsMethod = "nmax", CV=TRUE, numFolds = 10)
designExperiment <- as.factor(designExperiment)
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,labels = designExperiment ,multiDegsMethod = "nmax", CV=TRUE, numFolds = 10)
dim(expressionMatrix)[2]/10
dim(expressionMatrix)[2]/5
dim(expressionMatrix)[2]/6
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,labels = designExperiment ,multiDegsMethod = "nmax", CV=TRUE, numFolds = 6)
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,labels = designExperiment ,multiDegsMethod = "nmax", CV=FALSE, numFolds = 6)
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,labels = designExperiment ,multiDegsMethod = "nmax", CV=TRUE, numFolds = 6)
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,labels = designExperiment ,multiDegsMethod = "nmax", CV=TRUE, numFolds = 7)
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,labels = designExperiment ,multiDegsMethod = "nmax", CV=TRUE, numFolds = 8)
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,labels = designExperiment ,multiDegsMethod = "nmax", CV=TRUE, numFolds = 5)
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,labels = designExperiment ,multiDegsMethod = "nmax", CV=TRUE, numFolds = 6)
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,labels = designExperiment ,multiDegsMethod = "nmax", CV=TRUE, numFolds = 4)
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,labels = designExperiment ,multiDegsMethod = "nmax", CV=TRUE, numFolds = 5)
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,labels = designExperiment ,multiDegsMethod = "nmax", CV=TRUE, numFolds = 2)
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,labels = designExperiment ,multiDegsMethod = "nmax", CV=TRUE, numFolds = 3)
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,labels = designExperiment ,multiDegsMethod = "nmax", CV=TRUE, numFolds = 1)
designExperiment
designExperiment <- model.matrix(~ 0 + factor(colnames(expressionMatrix)))
colnames(designExperiment) <- c("BM", "JJ", "AML")
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,labels = designExperiment ,multiDegsMethod = "nmax", CV=TRUE, numFolds = 1)
designExperiment <- as.factor(rep(c("BM","JJ","AML"), each = numberReplic))
designExperiment <- as.factor(rep(c("BM","JJ","AML"), each = 2))
knowSeq <- KnowSeq::DEGsExtraction(expressionMatrix,labels = designExperiment ,multiDegsMethod = "nmax", CV=TRUE, numFolds = 1)
View(DEGsMatrix)
load_all()
consexpressionR::consexpressionR()
runTeste <- runExpression(2,)
runTeste <- runExpression(2,"teste", c("BM", "JJ", "JJ"), rDataFrameCount = table())
load(table_count_df)
load(gse95077)
load("gse95077.rda")
load("data/gse95077.rda")
gse95077_multiclass <- gse95077
colnames(gse95077_multiclass) <- colnames("BM", "BM.1", "JJ", "JJ.1", "AML", "AML.1")
colnames(gse95077_multiclass) <- colnames(c("BM", "BM.1", "JJ", "JJ.1", "AML", "AML.1"))
View(gse95077_multiclass)
colnames(gse95077_multiclass) <- c("BM", "BM.1", "JJ", "JJ.1", "AML", "AML.1")
runExTeste <- runExpression(numberReplics = 2,
groupName = c("BM", "BM.1", "JJ", "JJ.1", "AML", "AML.1"),
tableCountPath = NULL,
rDataFrameCount = gse95077_multiclass,
respTypeSamseq = "Multiclass")
runExTeste <- runExpression(numberReplics = 2,
groupName = c("BM", "BM", "JJ", "JJ", "AML", "AML"),
tableCountPath = NULL,
rDataFrameCount = gse95077_multiclass,
respTypeSamseq = "Multiclass")
runExTeste <- runExpression(numberReplics = 2,
groupName = c("BM", "JJ", "AML"),
tableCountPath = NULL,
rDataFrameCount = gse95077_multiclass,
respTypeSamseq = "Multiclass")
runExTeste <- runExpression(numberReplics = 2,
groupName = c("BM", "JJ", "AML"),
tableCountPath = NULL,
rDataFrameCount = gse95077_multiclass,
respTypeSamseq = "Multiclass", condExpNoiseq = c("BM","AML") )
View(runExTeste)
head(runExTeste[["ebseq"]])
View(runExTeste$limma)
colnames(runExTeste$limma)
load_all()
consexpressionR::consexpressionR()
load_all()
consexpressionR::consexpressionR()
load_all()
consexpressionR::consexpressionR()
load_all()
consexpressionR::consexpressionR()
View(runExTeste$samseq)
colnames(runExTeste$samseq)
load_all()
load_all()
colnames(runExTeste$samseq)
consexpressionR::consexpressionR()
runExTeste$ebseq
runExTeste$ebseq <- runEbseq(gse95077_multiclass, c("BM", "BM", "JJ", "JJ", "AML", "AML"),groups = c("BM", "JJ", "AML"))
load_all()
runExTeste$ebseq <- runEbseq(gse95077_multiclass, c("BM", "BM", "JJ", "JJ", "AML", "AML"),groups = c("BM", "JJ", "AML"))
load_all()
runExTeste$ebseq <- runEbseq(gse95077_multiclass, c("BM", "BM", "JJ", "JJ", "AML", "AML"),groups = c("BM", "JJ", "AML"))
runExTeste$ebseq
?EBSeq::GetMultiPP
load_all()
runExTeste$ebseq <- runEbseq(gse95077_multiclass, c("BM", "BM", "JJ", "JJ", "AML", "AML"),groups = c("BM", "JJ", "AML"))
runExTeste$ebseq
EBSeq::GetDEResults(runExTeste$ebseq)
load_all()
runExTeste$ebseq <- runEbseq(gse95077_multiclass, c("BM", "BM", "JJ", "JJ", "AML", "AML"),groups = c("BM", "JJ", "AML"))
runExTeste$ebseq
load_all()
runExTeste$ebseq <- runEbseq(gse95077_multiclass, c("BM", "BM", "JJ", "JJ", "AML", "AML"),groups = c("BM", "JJ", "AML"))
runExTeste$ebseq
load_all()
runExTeste$ebseq
runExTeste$ebseq <- runEbseq(gse95077_multiclass, c("BM", "BM", "JJ", "JJ", "AML", "AML"),groups = c("BM", "JJ", "AML"))
runExTeste$ebseq
differentially_expressed_genes <- rownames(runExTeste$ebseq$PPMat)[apply(runExTeste$ebseq$PPMat, 1, max) >= 0.8]
differentially_expressed_genes
differentially_expressed_genes <- apply(runExTeste$ebseq$PPMat, 1, max) >= 0.8
differentially_expressed_genes
View(differentially_expressed_genes)
differentially_expressed_genes <- rownames(runExTeste$ebseq$PPMat)[apply(runExTeste$ebseq$PPMat, 1, max) >= 0.8]
differentially_expressed_genes <- runExTeste$ebseq$PPMat[apply(runExTeste$ebseq$PPMat, 1, max) >= 0.8]
View(differentially_expressed_genes)
differentially_expressed_genes
differentially_expressed_genes <- rownames(runExTeste$ebseq$PPMat)[apply(runExTeste$ebseq$PPMat, 1, max) >= 0.8]
differentially_expressed_genes_ind <- apply(runExTeste$ebseq$PPMat, 1, max) >= 0.8
differentially_expressed_genes <- runExTeste$ebseq$PPMat[differentially_expressed_ind, ]
differentially_expressed_genes <- runExTeste$ebseq$PPMat[differentially_expressed_genes_ind, ]
runExTeste$ebseq$AllParti
load_all()
runExTeste$ebseq <- runEbseq(gse95077_multiclass, c("BM", "BM", "JJ", "JJ", "AML", "AML"),groups = c("BM", "JJ", "AML"))
colnames(runExTeste$ebseq)
runExTeste$ebseq
names(runExTeste$ebseq)
load_all()
load_all()
runExTeste$ebseq <- runEbseq(gse95077_multiclass, c("BM", "BM", "JJ", "JJ", "AML", "AML"),groups = c("BM", "JJ", "AML"))
load_all()
runExTeste$ebseq <- runEbseq(gse95077_multiclass, c("BM", "BM", "JJ", "JJ", "AML", "AML"),groups = c("BM", "JJ", "AML"))
load_all()
runExTeste$ebseq <- runEbseq(gse95077_multiclass, c("BM", "BM", "JJ", "JJ", "AML", "AML"),groups = c("BM", "JJ", "AML"))
runExTeste$ebseq$Log2PostFCMat
load_all()
runExTeste$ebseq <- runEbseq(gse95077_multiclass, c("BM", "BM", "JJ", "JJ", "AML", "AML"),groups = c("BM", "JJ", "AML"))
deListTest <- expressionDefinition(runExTeste,groups = c("BM", "JJ", "AML"))
load_all()
deListTest <- expressionDefinition(runExTeste,groups = c("BM", "JJ", "AML"))
View(deListTest)
View(runExTeste)
runExTeste$ebseq <- runEbseq(gse95077_multiclass, c("BM", "BM", "JJ", "JJ", "AML", "AML"),groups = c("BM", "JJ", "AML"))
!is.null(runExTeste$ebseq
)
ebseqDf_index <- apply(runExTeste$ebseq$PP, 1, max) >= 0.8 & apply(runExTeste$ebseq$Log2PostFCMat, 1, max) >= 2 & apply(runExTeste$ebseq$Log2PostFCMat, 1, max) <= -2
ebseqDf_index
ebseqDf_index <- apply(runExTeste$ebseq$Log2PostFCMat, 1, max) >= 2 & apply(runExTeste$ebseq$Log2PostFCMat, 1, max) <= -2
ebseqDf_index
ebseqDf_index <- apply(runExTeste$ebseq$PP, 1, max) >= 0.8
ebseqDf_index
load_all()
runExTeste$ebseq <- runEbseq(gse95077_multiclass, c("BM", "BM", "JJ", "JJ", "AML", "AML"),groups = c("BM", "JJ", "AML"))
deListTest <- expressionDefinition(runExTeste,groups = c("BM", "JJ", "AML"))
View(deListTest)
deListTest$ebseq <- runExTeste$ebseq$Log2FCPostMat[ebseqDf_index, ]
runExTeste$ebseq$Log2FCPostMat[ebseqDf_index, ]
ebseqDf_index <- apply(runExTeste$ebseq$PP, 1, max) >= 0.8
runExTeste$ebseq$Log2FCPostMat[ebseqDf_index, ]
runExTeste$ebseq$Log2PostFCMat[ebseqDf_index,]
runExTeste$ebseq <- runEbseq(gse95077_multiclass, c("BM", "BM", "JJ", "JJ", "AML", "AML"),groups = c("BM", "JJ", "AML"))
deListTest <- expressionDefinition(runExTeste,groups = c("BM", "JJ", "AML"))
View(deListTest)
View(runExTeste)
deListTest <- expressionDefinition(resultTool = runExTeste,groups = c("BM", "JJ", "AML"))
View(runExTeste)
names(runExTeste$ebseq)
runExTeste$ebseq <- runEbseq(gse95077_multiclass, c("BM", "BM", "JJ", "JJ", "AML", "AML"),groups = c("BM", "JJ", "AML"))
View(runExTeste)
load_all()
deListTest <- expressionDefinition(resultTool = runExTeste,groups = c("BM", "JJ", "AML"))
View(deListTest)
load_all()
deListTest <- expressionDefinition(resultTool = runExTeste,groups = c("BM", "JJ", "AML"))
View(deListTest)
load_all()
remove(ebseqDf_index)
consexpressionR()
runExTeste$ebseq$PP
runExTeste$ebseq$Log2PostFCMat
eb['PP'] <- runExTeste$ebseq$PP
eb$PP <- runExTeste$ebseq$PP
eb <- runExTeste$ebseq$PP
eb$$Log2PostFCMat <- runExTeste$ebseq$Log2PostFCMat
eb$Log2PostFCMat <- runExTeste$ebseq$Log2PostFCMat
View(eb)
eb <- runExTeste$ebseq$PP
View(eb)
eb$Log2PostFCMat <- runExTeste$ebseq$Log2PostFCMat
View(eb)
eb <- runExTeste$ebseq$PP
eb['Log2PostFCMat'] <- runExTeste$ebseq$Log2PostFCMat
eb
eb$Log2PostFCMat <- runExTeste$ebseq$Log2PostFCMat
remove(eb)
eb$Log2PostFCMat <- runExTeste$ebseq$Log2PostFCMat
eb['Log2PostFCMat']<- runExTeste$ebseq$Log2PostFCMat
eb <- NULL
eb['Log2PostFCMat']<- runExTeste$ebseq$Log2PostFCMat
eb
remove(eb)
eb<- runExTeste$ebseq$Log2PostFCMat
eb
eb['AML Over BM']
eb[`AML Over BM`]
eb$`AML Over BM`
eb
View(eb)
eb <- as.data.frame(eb)
eb
View(eb)
eb2 <- merge(eb, runExTeste$ebseq$PP)
View(eb2)
eb2 <- merge(eb, runExTeste$ebseq$PP, by="id")
eb2 <- merge(eb, runExTeste$ebseq$PP, by= row.names)
eb2 <- merge(eb, runExTeste$ebseq$PP, how='outer', by= row.names)
c <- as.data.frame(runExTeste$ebseq$PP)
eb2 <- merge(eb, c, how='outer', by= row.names)
eb2 <- merge(eb, c, how='inner', by= row.names)
eb2 <- bind_rows(eb, c)
eb2 <- dplyr::bind_rows(eb, c)
eb<- as.tibble(runExTeste$ebseq$Log2PostFCMat)
eb<- tibble(runExTeste$ebseq$Log2PostFCMat)
eb<- tibble::as_tibble(runExTeste$ebseq$Log2PostFCMat)
eb2 <- dplyr::bind_rows(eb, tibble::as_tibble(c))
runExTeste$ebseq$Log2PostFCMat
runExTeste$ebseq$PP
c <- tibble::as_tibble(runExTeste$ebseq$PP)
eb2 <- dplyr::bind_rows(eb, tibble::as_tibble(c))
c <- c %>% dplyr::rownames_to_column(var = "gene")
c <- c %>% tibble::rownames_to_column(var = "gene")
c
c <- tibble::as_tibble(runExTeste$ebseq$PP)
c
c <- tibble::as_tibble(runExTeste$ebseq$PP, rownames = row.names)
runExTeste$ebseq$PP
c <- tibble::as_tibble(runExTeste$ebseq$PP, rownames = 1)
c <- tibble::as_tibble(runExTeste$ebseq$PP, rownames = "")
head(runExTeste$ebseq$PP)
remove(c, deListTest, differentially_expressed_genes, differentially_expressed_genes_ind, eb, eb2)
condition <- c("CB", "CB", "JJ", "JJ",  "AML", "AML")
ebOutTeste <- EBSeq::EBMultiTest(Data = as.matrix(gse95077_multiclass),
Conditions = condition,
sizeFactors = sizes,
maxround = 50)
sizesTeste <- EBSeq::MedianNorm(as.matrix(gse95077_multiclass))
ebOutTeste <- EBSeq::EBMultiTest(Data = as.matrix(gse95077_multiclass),
Conditions = condition,
sizeFactors = sizesTeste,
maxround = 50)
ebOutMultiTeste <- EBSeq::GetMultiFC(ebOutTeste)
ebOutMultiTestePP <- EBSeq::GetMultiPP(ebOutTeste)
linhas_selecionadas <- apply(ebOutMultiTestePP$PP, 1, function(row) any(row >= 0.8))
ebOutMultiTeste$Log2PostFCMat <- ifelse(linhas_selecionadas, "DE", "NDE")
head(ebOutMultiTeste$Log2PostFCMat)
ebOutMultiTeste$Log2PostFCMat$exp <- ifelse(linhas_selecionadas, "DE", "NDE")
head(ebOutMultiTeste$Log2PostFCMat)
ebOutMultiTeste <- EBSeq::GetMultiFC(ebOutTeste)
ebOutMultiTeste$Log2PostFCMat <- ifelse(linhas_selecionadas, "DE", "NDE")
View(ebOutMultiTeste$Log2PostFCMat)
ebOutMultiTeste <- EBSeq::GetMultiFC(ebOutTeste)
ebOutMultiTeste$DE <- ifelse(linhas_selecionadas, "DE", "NDE")
ebOutMultiTeste$DE
typeof(ebOutMultiTeste$Log2PostFCMat)
is.data.frame(ebOutMultiTeste$Log2PostFCMat)
ebOutputDE <- as.data.frame(ebOutMultiTeste$Log2PostFCMat, ebOutMultiTeste$PostFCMat)
View(ebOutputDE)
ebOutMultiTeste <- EBSeq::GetMultiFC(ebOutTeste)
ebOutMultiTestePP <- EBSeq::GetMultiPP(ebOutTeste)
linhas_selecionadas <- apply(ebOutMultiTestePP$PP, 1, function(row) any(row >= 0.8))
ebOutMultiTestePP$DifExp <- <- ifelse(linhas_selecionadas, "DE", "NDE")
ebOutMultiTestePP$DifExp <- ifelse(linhas_selecionadas, "DE", "NDE")
ebOutputDE <- merge(ebOutMultiTeste$Log2PostFCMat, ebOutMultiTestePP$DifExp, by=row.names)
ebOutputDE <- merge(ebOutMultiTeste$Log2PostFCMat, ebOutMultiTestePP$DifExp)
View(ebOutputDE)
ebOutputDE <- merge(ebOutMultiTeste$Log2PostFCMat, ebOutMultiTestePP$DifExp, by=rownames)
ebOutputDE <- merge(ebOutMultiTeste$Log2PostFCMat, ebOutMultiTestePP$DifExp, by=0, all.x=TRUE)
View(ebOutTeste)
View(ebOutputDE)
ebOutMultiTestePP <- EBSeq::GetPPMat(ebOutTeste)
View(ebOutMultiTeste)
ebOutMultiTestePP <- EBSeq::GetMultiPP(ebOutTeste)
View(ebOutMultiTestePP$MAP )
head(ebOutMultiTestePP$MAP )
View(ebOutMultiTestePP$PP)
head(ebOutMultiTestePP$PP)
linhas_selecionadas <- apply(ebOutMultiTestePP$PP, 1, function(row) any(row >= 0.8))
ebOutMultiTestePP$DifExp <- ifelse(linhas_selecionadas, "DE", "NDE")
ebOutMultiTestePP$DifExp
dfPP <- ebOutMultiTestePP$PP
View(dfPP)
dfPP <- as.data.frame(ebOutMultiTestePP$PP)
dfLogFCPP <- as.data.frame(ebOutMultiTeste$Log2PostFCMat)
View(dfLogFCPP)
dfPP <- as.data.frame(ebOutMultiTestePP$DifExp)
newDf <- merge(dfLogFCPP, dfPP, by="RowNames", all = TRUE)
dfLogFCPP$RowNames < row.names(dfLogFCPP)
dfLogFCPP$RowNames <- row.names(dfLogFCPP)
dfPP$RowNames <- row.names(dfPP)
newDf <- merge(dfLogFCPP, dfPP, by="RowNames", all = TRUE)
View(newDf)
row.names(newDf) <- newDf$RowNames
newDf$RowNames <- NULL
load_all()
ebOutTeste <- EBSeq::EBMultiTest(Data = as.matrix(gse95077_multiclass),
Conditions = condition,
sizeFactors = sizes,
maxround = 50)
remove(ebOutputDE, ebOutMultiTeste, ebOutMultiTeste, ebOutMultiTestePP)
remove(newDf, dfPP, dfLogFCPP)
remove(ebOutTeste)
load_all()
load_all()
ebOutTeste <- EBSeq::EBMultiTest(Data = as.matrix(gse95077_multiclass),
Conditions = condition,
sizeFactors = sizes,
maxround = 50)
ebOut <- runEbseq(countMatrix= gse95077_multiclass, designExperiment = condition, groups = c("CB", "JJ", "AML"))
load_all()
ebOut <- runEbseq(countMatrix= gse95077_multiclass, designExperiment = condition, groups = c("CB", "JJ", "AML"))
load_all()
ebOut <- runEbseq(countMatrix= gse95077_multiclass, designExperiment = condition, groups = c("CB", "JJ", "AML"))
View(ebOut)
ebOut <- runEbseq(countMatrix= gse95077, designExperiment = c("CB","CB","CB", "JJ", "JJ", "JJ"), groups = c("CB", "JJ"))
View(ebOut)
load_all()
ebOutTeste <- EBSeq::EBMultiTest(Data = as.matrix(gse95077_multiclass),
Conditions = condition,
sizeFactors = sizesTeste,
maxround = 50)
View(ebOutTeste)
ebOut$DEfound
ebOutPP <- EBSeq::GetMultiPP(ebOutTeste)
r <- rank(ebOutPP$PP[, 1])
r
View(ebOut)
linhas_selecionadas <- apply(ebOutPP$PP, 1, function(row) any(row >= 0.8))
ebOutPP$difExp <- ifelse(linhas_selecionadas, "DE", "EE")
dataPP <- as.data.frame(ebOutPP$difExp)
colnames(dataPP)[ncol(dataPP)] <- "DEFound"
dataPP
linhas_selecionadas <- apply(ebOutPP$PP, 1, function(row) any(row >= 0.8))
ebOutPP$difExp <- ifelse(linhas_selecionadas, "DE", "EE")
colnames(ebOutPP)[ncol(ebOutPP)] <- "DEFound"
linhas_selecionadas <- apply(ebOutPP$PP, 1, function(row) any(row >= 0.8))
ebOutPP$difExp <- ifelse(linhas_selecionadas, "DE", "EE")
colnames(ebOutPP)[length(names(ebOutPP))] <- "DEFound"
linhas_selecionadas <- apply(ebOutPP$PP, 1, function(row) any(row >= 0.8))
ebOutPP$difExp <- ifelse(linhas_selecionadas, "DE", "EE")
names(ebOutPP)[length(names(ebOutPP))] <- "DEFound"
View(ebOutPP)
ebOutPP
ebOutPP$PP
ebOutPP$DEFound
load_all()
ebOut <- runEbseq(countMatrix= gse95077_multiclass, designExperiment = condition, groups = c("CB", "JJ", "AML"))
ebOut
load_all()
ebOut <- runEbseq(countMatrix= gse95077_multiclass, designExperiment = condition, groups = c("CB", "JJ", "AML"))
load_all()
ebOut <- runEbseq(countMatrix= gse95077_multiclass, designExperiment = condition, groups = c("CB", "JJ", "AML"))
View(ebOut)
load_all()
ebOut <- runEbseq(countMatrix= gse95077_multiclass, designExperiment = condition, groups = c("CB", "JJ", "AML"))
load_all()
ebOut <- runEbseq(countMatrix= gse95077_multiclass, designExperiment = condition, groups = c("CB", "JJ", "AML"))
View(ebOut)
ebOut <- runEbseq(countMatrix= gse95077, designExperiment = c("CB","CB","CB", "JJ", "JJ", "JJ"), groups = c("CB", "JJ"))
View(ebOut)
ebOut$DEfound
ebOut$Status
load_all()
ebOut <- runEbseq(countMatrix= gse95077, designExperiment = c("CB","CB","CB", "JJ", "JJ", "JJ"), groups = c("CB", "JJ"))
ebOut <- runEbseq(countMatrix= gse95077_multiclass, designExperiment = condition, groups = c("CB", "JJ", "AML"))
View(ebOut)
load_all()
ebOut <- runEbseq(countMatrix= gse95077, designExperiment = c("CB","CB","CB", "JJ", "JJ", "JJ"), groups = c("CB", "JJ"))
ebOut <- runEbseq(countMatrix= gse95077_multiclass, designExperiment = condition, groups = c("CB", "JJ", "AML"))
ebOut <- runEbseq(countMatrix= gse95077, designExperiment = c("CB","CB","CB", "JJ", "JJ", "JJ"), groups = c("CB", "JJ"))
remove(dataPP, ebOut, ebOutPP, ebOutTeste, linhas_selecionadas, r, sizesTeste)
runExTeste <- runExpression(numberReplics = 2,groupName = c("BM", "JJ", "AML"),tableCountPath = NULL,rDataFrameCount = gse95077_multiclass,respTypeSamseq = "Multiclass")
runExTeste <- runExpression(numberReplics = 2,groupName = c("BM", "JJ", "AML"),tableCountPath = NULL,rDataFrameCount = gse95077_multiclass,respTypeSamseq = "Multiclass", condExpNoiseq = c("BM", "JJ"))
View(runExTeste)
runExTeste <- runExpression(numberReplics = 3,groupName = c("BM", "JJ"),tableCountPath = NULL,rDataFrameCount = gse95077)
runExTeste$samseq
load_all()
runExTeste <- runExpression(numberReplics = 3,groupName = c("BM", "JJ"),tableCountPath = NULL,rDataFrameCount = gse95077)
View(runExTeste)
load_all()
runExTeste <- runExpression(numberReplics = 3,groupName = c("BM", "JJ"),tableCountPath = NULL,rDataFrameCount = gse95077)
View(runExTeste)
View(runExTeste[["samseq"]])
runExTeste <- runExpression(numberReplics = 2,groupName = c("BM", "JJ", "AML"),tableCountPath = NULL,rDataFrameCount = gse95077_multiclass,respTypeSamseq = "Multiclass", condExpNoiseq = c("BM", "JJ"))
View(runExTeste)
runExTestDiff <- expressionDefinition(runExTeste, c("BM", "JJ", "AML"))
load_all()
runExTestDiff <- expressionDefinition(runExTeste, c("BM", "JJ", "AML"))
View(runExTeste)
View(runExTestDiff)
runExTeste <- runExpression(numberReplics = 3,groupName = c("BM", "JJ"),tableCountPath = NULL,rDataFrameCount = gse95077)
runExTestDiff <- expressionDefinition(runExTeste, c("BM", "JJ"))
load_all()
consexpressionR()
